
03_UART_TX_POLL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001f04  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  0800209c  0800209c  0000309c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080020c4  080020c4  0000400c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080020c4  080020c4  000030c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080020cc  080020cc  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080020cc  080020cc  000030cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080020d0  080020d0  000030d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080020d4  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000068  2000000c  080020e0  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000074  080020e0  00004074  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007593  00000000  00000000  0000403c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001509  00000000  00000000  0000b5cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000658  00000000  00000000  0000cad8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000004cd  00000000  00000000  0000d130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014c1c  00000000  00000000  0000d5fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007a89  00000000  00000000  00022219  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00081e3f  00000000  00000000  00029ca2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000abae1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001864  00000000  00000000  000abb24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  000ad388  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08002084 	.word	0x08002084

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	08002084 	.word	0x08002084

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001ec:	f000 b988 	b.w	8000500 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	468e      	mov	lr, r1
 8000210:	4604      	mov	r4, r0
 8000212:	4688      	mov	r8, r1
 8000214:	2b00      	cmp	r3, #0
 8000216:	d14a      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d962      	bls.n	80002e4 <__udivmoddi4+0xdc>
 800021e:	fab2 f682 	clz	r6, r2
 8000222:	b14e      	cbz	r6, 8000238 <__udivmoddi4+0x30>
 8000224:	f1c6 0320 	rsb	r3, r6, #32
 8000228:	fa01 f806 	lsl.w	r8, r1, r6
 800022c:	fa20 f303 	lsr.w	r3, r0, r3
 8000230:	40b7      	lsls	r7, r6
 8000232:	ea43 0808 	orr.w	r8, r3, r8
 8000236:	40b4      	lsls	r4, r6
 8000238:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800023c:	fa1f fc87 	uxth.w	ip, r7
 8000240:	fbb8 f1fe 	udiv	r1, r8, lr
 8000244:	0c23      	lsrs	r3, r4, #16
 8000246:	fb0e 8811 	mls	r8, lr, r1, r8
 800024a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024e:	fb01 f20c 	mul.w	r2, r1, ip
 8000252:	429a      	cmp	r2, r3
 8000254:	d909      	bls.n	800026a <__udivmoddi4+0x62>
 8000256:	18fb      	adds	r3, r7, r3
 8000258:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 800025c:	f080 80ea 	bcs.w	8000434 <__udivmoddi4+0x22c>
 8000260:	429a      	cmp	r2, r3
 8000262:	f240 80e7 	bls.w	8000434 <__udivmoddi4+0x22c>
 8000266:	3902      	subs	r1, #2
 8000268:	443b      	add	r3, r7
 800026a:	1a9a      	subs	r2, r3, r2
 800026c:	b2a3      	uxth	r3, r4
 800026e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000272:	fb0e 2210 	mls	r2, lr, r0, r2
 8000276:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800027a:	fb00 fc0c 	mul.w	ip, r0, ip
 800027e:	459c      	cmp	ip, r3
 8000280:	d909      	bls.n	8000296 <__udivmoddi4+0x8e>
 8000282:	18fb      	adds	r3, r7, r3
 8000284:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000288:	f080 80d6 	bcs.w	8000438 <__udivmoddi4+0x230>
 800028c:	459c      	cmp	ip, r3
 800028e:	f240 80d3 	bls.w	8000438 <__udivmoddi4+0x230>
 8000292:	443b      	add	r3, r7
 8000294:	3802      	subs	r0, #2
 8000296:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800029a:	eba3 030c 	sub.w	r3, r3, ip
 800029e:	2100      	movs	r1, #0
 80002a0:	b11d      	cbz	r5, 80002aa <__udivmoddi4+0xa2>
 80002a2:	40f3      	lsrs	r3, r6
 80002a4:	2200      	movs	r2, #0
 80002a6:	e9c5 3200 	strd	r3, r2, [r5]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d905      	bls.n	80002be <__udivmoddi4+0xb6>
 80002b2:	b10d      	cbz	r5, 80002b8 <__udivmoddi4+0xb0>
 80002b4:	e9c5 0100 	strd	r0, r1, [r5]
 80002b8:	2100      	movs	r1, #0
 80002ba:	4608      	mov	r0, r1
 80002bc:	e7f5      	b.n	80002aa <__udivmoddi4+0xa2>
 80002be:	fab3 f183 	clz	r1, r3
 80002c2:	2900      	cmp	r1, #0
 80002c4:	d146      	bne.n	8000354 <__udivmoddi4+0x14c>
 80002c6:	4573      	cmp	r3, lr
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xc8>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 8105 	bhi.w	80004da <__udivmoddi4+0x2d2>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	4690      	mov	r8, r2
 80002da:	2d00      	cmp	r5, #0
 80002dc:	d0e5      	beq.n	80002aa <__udivmoddi4+0xa2>
 80002de:	e9c5 4800 	strd	r4, r8, [r5]
 80002e2:	e7e2      	b.n	80002aa <__udivmoddi4+0xa2>
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f000 8090 	beq.w	800040a <__udivmoddi4+0x202>
 80002ea:	fab2 f682 	clz	r6, r2
 80002ee:	2e00      	cmp	r6, #0
 80002f0:	f040 80a4 	bne.w	800043c <__udivmoddi4+0x234>
 80002f4:	1a8a      	subs	r2, r1, r2
 80002f6:	0c03      	lsrs	r3, r0, #16
 80002f8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002fc:	b280      	uxth	r0, r0
 80002fe:	b2bc      	uxth	r4, r7
 8000300:	2101      	movs	r1, #1
 8000302:	fbb2 fcfe 	udiv	ip, r2, lr
 8000306:	fb0e 221c 	mls	r2, lr, ip, r2
 800030a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800030e:	fb04 f20c 	mul.w	r2, r4, ip
 8000312:	429a      	cmp	r2, r3
 8000314:	d907      	bls.n	8000326 <__udivmoddi4+0x11e>
 8000316:	18fb      	adds	r3, r7, r3
 8000318:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 800031c:	d202      	bcs.n	8000324 <__udivmoddi4+0x11c>
 800031e:	429a      	cmp	r2, r3
 8000320:	f200 80e0 	bhi.w	80004e4 <__udivmoddi4+0x2dc>
 8000324:	46c4      	mov	ip, r8
 8000326:	1a9b      	subs	r3, r3, r2
 8000328:	fbb3 f2fe 	udiv	r2, r3, lr
 800032c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000330:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000334:	fb02 f404 	mul.w	r4, r2, r4
 8000338:	429c      	cmp	r4, r3
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x144>
 800033c:	18fb      	adds	r3, r7, r3
 800033e:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x142>
 8000344:	429c      	cmp	r4, r3
 8000346:	f200 80ca 	bhi.w	80004de <__udivmoddi4+0x2d6>
 800034a:	4602      	mov	r2, r0
 800034c:	1b1b      	subs	r3, r3, r4
 800034e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0x98>
 8000354:	f1c1 0620 	rsb	r6, r1, #32
 8000358:	408b      	lsls	r3, r1
 800035a:	fa22 f706 	lsr.w	r7, r2, r6
 800035e:	431f      	orrs	r7, r3
 8000360:	fa0e f401 	lsl.w	r4, lr, r1
 8000364:	fa20 f306 	lsr.w	r3, r0, r6
 8000368:	fa2e fe06 	lsr.w	lr, lr, r6
 800036c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000370:	4323      	orrs	r3, r4
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	fa1f fc87 	uxth.w	ip, r7
 800037a:	fbbe f0f9 	udiv	r0, lr, r9
 800037e:	0c1c      	lsrs	r4, r3, #16
 8000380:	fb09 ee10 	mls	lr, r9, r0, lr
 8000384:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000388:	fb00 fe0c 	mul.w	lr, r0, ip
 800038c:	45a6      	cmp	lr, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	d909      	bls.n	80003a8 <__udivmoddi4+0x1a0>
 8000394:	193c      	adds	r4, r7, r4
 8000396:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 800039a:	f080 809c 	bcs.w	80004d6 <__udivmoddi4+0x2ce>
 800039e:	45a6      	cmp	lr, r4
 80003a0:	f240 8099 	bls.w	80004d6 <__udivmoddi4+0x2ce>
 80003a4:	3802      	subs	r0, #2
 80003a6:	443c      	add	r4, r7
 80003a8:	eba4 040e 	sub.w	r4, r4, lr
 80003ac:	fa1f fe83 	uxth.w	lr, r3
 80003b0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b4:	fb09 4413 	mls	r4, r9, r3, r4
 80003b8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003bc:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c0:	45a4      	cmp	ip, r4
 80003c2:	d908      	bls.n	80003d6 <__udivmoddi4+0x1ce>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80003ca:	f080 8082 	bcs.w	80004d2 <__udivmoddi4+0x2ca>
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d97f      	bls.n	80004d2 <__udivmoddi4+0x2ca>
 80003d2:	3b02      	subs	r3, #2
 80003d4:	443c      	add	r4, r7
 80003d6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003da:	eba4 040c 	sub.w	r4, r4, ip
 80003de:	fba0 ec02 	umull	lr, ip, r0, r2
 80003e2:	4564      	cmp	r4, ip
 80003e4:	4673      	mov	r3, lr
 80003e6:	46e1      	mov	r9, ip
 80003e8:	d362      	bcc.n	80004b0 <__udivmoddi4+0x2a8>
 80003ea:	d05f      	beq.n	80004ac <__udivmoddi4+0x2a4>
 80003ec:	b15d      	cbz	r5, 8000406 <__udivmoddi4+0x1fe>
 80003ee:	ebb8 0203 	subs.w	r2, r8, r3
 80003f2:	eb64 0409 	sbc.w	r4, r4, r9
 80003f6:	fa04 f606 	lsl.w	r6, r4, r6
 80003fa:	fa22 f301 	lsr.w	r3, r2, r1
 80003fe:	431e      	orrs	r6, r3
 8000400:	40cc      	lsrs	r4, r1
 8000402:	e9c5 6400 	strd	r6, r4, [r5]
 8000406:	2100      	movs	r1, #0
 8000408:	e74f      	b.n	80002aa <__udivmoddi4+0xa2>
 800040a:	fbb1 fcf2 	udiv	ip, r1, r2
 800040e:	0c01      	lsrs	r1, r0, #16
 8000410:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000414:	b280      	uxth	r0, r0
 8000416:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800041a:	463b      	mov	r3, r7
 800041c:	4638      	mov	r0, r7
 800041e:	463c      	mov	r4, r7
 8000420:	46b8      	mov	r8, r7
 8000422:	46be      	mov	lr, r7
 8000424:	2620      	movs	r6, #32
 8000426:	fbb1 f1f7 	udiv	r1, r1, r7
 800042a:	eba2 0208 	sub.w	r2, r2, r8
 800042e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000432:	e766      	b.n	8000302 <__udivmoddi4+0xfa>
 8000434:	4601      	mov	r1, r0
 8000436:	e718      	b.n	800026a <__udivmoddi4+0x62>
 8000438:	4610      	mov	r0, r2
 800043a:	e72c      	b.n	8000296 <__udivmoddi4+0x8e>
 800043c:	f1c6 0220 	rsb	r2, r6, #32
 8000440:	fa2e f302 	lsr.w	r3, lr, r2
 8000444:	40b7      	lsls	r7, r6
 8000446:	40b1      	lsls	r1, r6
 8000448:	fa20 f202 	lsr.w	r2, r0, r2
 800044c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000450:	430a      	orrs	r2, r1
 8000452:	fbb3 f8fe 	udiv	r8, r3, lr
 8000456:	b2bc      	uxth	r4, r7
 8000458:	fb0e 3318 	mls	r3, lr, r8, r3
 800045c:	0c11      	lsrs	r1, r2, #16
 800045e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000462:	fb08 f904 	mul.w	r9, r8, r4
 8000466:	40b0      	lsls	r0, r6
 8000468:	4589      	cmp	r9, r1
 800046a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800046e:	b280      	uxth	r0, r0
 8000470:	d93e      	bls.n	80004f0 <__udivmoddi4+0x2e8>
 8000472:	1879      	adds	r1, r7, r1
 8000474:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000478:	d201      	bcs.n	800047e <__udivmoddi4+0x276>
 800047a:	4589      	cmp	r9, r1
 800047c:	d81f      	bhi.n	80004be <__udivmoddi4+0x2b6>
 800047e:	eba1 0109 	sub.w	r1, r1, r9
 8000482:	fbb1 f9fe 	udiv	r9, r1, lr
 8000486:	fb09 f804 	mul.w	r8, r9, r4
 800048a:	fb0e 1119 	mls	r1, lr, r9, r1
 800048e:	b292      	uxth	r2, r2
 8000490:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000494:	4542      	cmp	r2, r8
 8000496:	d229      	bcs.n	80004ec <__udivmoddi4+0x2e4>
 8000498:	18ba      	adds	r2, r7, r2
 800049a:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 800049e:	d2c4      	bcs.n	800042a <__udivmoddi4+0x222>
 80004a0:	4542      	cmp	r2, r8
 80004a2:	d2c2      	bcs.n	800042a <__udivmoddi4+0x222>
 80004a4:	f1a9 0102 	sub.w	r1, r9, #2
 80004a8:	443a      	add	r2, r7
 80004aa:	e7be      	b.n	800042a <__udivmoddi4+0x222>
 80004ac:	45f0      	cmp	r8, lr
 80004ae:	d29d      	bcs.n	80003ec <__udivmoddi4+0x1e4>
 80004b0:	ebbe 0302 	subs.w	r3, lr, r2
 80004b4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004b8:	3801      	subs	r0, #1
 80004ba:	46e1      	mov	r9, ip
 80004bc:	e796      	b.n	80003ec <__udivmoddi4+0x1e4>
 80004be:	eba7 0909 	sub.w	r9, r7, r9
 80004c2:	4449      	add	r1, r9
 80004c4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004c8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004cc:	fb09 f804 	mul.w	r8, r9, r4
 80004d0:	e7db      	b.n	800048a <__udivmoddi4+0x282>
 80004d2:	4673      	mov	r3, lr
 80004d4:	e77f      	b.n	80003d6 <__udivmoddi4+0x1ce>
 80004d6:	4650      	mov	r0, sl
 80004d8:	e766      	b.n	80003a8 <__udivmoddi4+0x1a0>
 80004da:	4608      	mov	r0, r1
 80004dc:	e6fd      	b.n	80002da <__udivmoddi4+0xd2>
 80004de:	443b      	add	r3, r7
 80004e0:	3a02      	subs	r2, #2
 80004e2:	e733      	b.n	800034c <__udivmoddi4+0x144>
 80004e4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e8:	443b      	add	r3, r7
 80004ea:	e71c      	b.n	8000326 <__udivmoddi4+0x11e>
 80004ec:	4649      	mov	r1, r9
 80004ee:	e79c      	b.n	800042a <__udivmoddi4+0x222>
 80004f0:	eba1 0109 	sub.w	r1, r1, r9
 80004f4:	46c4      	mov	ip, r8
 80004f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004fa:	fb09 f804 	mul.w	r8, r9, r4
 80004fe:	e7c4      	b.n	800048a <__udivmoddi4+0x282>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b088      	sub	sp, #32
 8000508:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800050a:	f107 030c 	add.w	r3, r7, #12
 800050e:	2200      	movs	r2, #0
 8000510:	601a      	str	r2, [r3, #0]
 8000512:	605a      	str	r2, [r3, #4]
 8000514:	609a      	str	r2, [r3, #8]
 8000516:	60da      	str	r2, [r3, #12]
 8000518:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800051a:	2300      	movs	r3, #0
 800051c:	60bb      	str	r3, [r7, #8]
 800051e:	4b18      	ldr	r3, [pc, #96]	@ (8000580 <MX_GPIO_Init+0x7c>)
 8000520:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000522:	4a17      	ldr	r2, [pc, #92]	@ (8000580 <MX_GPIO_Init+0x7c>)
 8000524:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000528:	6313      	str	r3, [r2, #48]	@ 0x30
 800052a:	4b15      	ldr	r3, [pc, #84]	@ (8000580 <MX_GPIO_Init+0x7c>)
 800052c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800052e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000532:	60bb      	str	r3, [r7, #8]
 8000534:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000536:	2300      	movs	r3, #0
 8000538:	607b      	str	r3, [r7, #4]
 800053a:	4b11      	ldr	r3, [pc, #68]	@ (8000580 <MX_GPIO_Init+0x7c>)
 800053c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800053e:	4a10      	ldr	r2, [pc, #64]	@ (8000580 <MX_GPIO_Init+0x7c>)
 8000540:	f043 0301 	orr.w	r3, r3, #1
 8000544:	6313      	str	r3, [r2, #48]	@ 0x30
 8000546:	4b0e      	ldr	r3, [pc, #56]	@ (8000580 <MX_GPIO_Init+0x7c>)
 8000548:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800054a:	f003 0301 	and.w	r3, r3, #1
 800054e:	607b      	str	r3, [r7, #4]
 8000550:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000552:	2200      	movs	r2, #0
 8000554:	2120      	movs	r1, #32
 8000556:	480b      	ldr	r0, [pc, #44]	@ (8000584 <MX_GPIO_Init+0x80>)
 8000558:	f000 fcaa 	bl	8000eb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800055c:	2320      	movs	r3, #32
 800055e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000560:	2301      	movs	r3, #1
 8000562:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000564:	2300      	movs	r3, #0
 8000566:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000568:	2300      	movs	r3, #0
 800056a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800056c:	f107 030c 	add.w	r3, r7, #12
 8000570:	4619      	mov	r1, r3
 8000572:	4804      	ldr	r0, [pc, #16]	@ (8000584 <MX_GPIO_Init+0x80>)
 8000574:	f000 fb18 	bl	8000ba8 <HAL_GPIO_Init>

}
 8000578:	bf00      	nop
 800057a:	3720      	adds	r7, #32
 800057c:	46bd      	mov	sp, r7
 800057e:	bd80      	pop	{r7, pc}
 8000580:	40023800 	.word	0x40023800
 8000584:	40020000 	.word	0x40020000

08000588 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000588:	b590      	push	{r4, r7, lr}
 800058a:	b085      	sub	sp, #20
 800058c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800058e:	f000 f98f 	bl	80008b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000592:	f000 f819 	bl	80005c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000596:	f7ff ffb5 	bl	8000504 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800059a:	f000 f8ed 	bl	8000778 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  uint8_t txData[] = "Hello STM32\r\n";
 800059e:	4b08      	ldr	r3, [pc, #32]	@ (80005c0 <main+0x38>)
 80005a0:	463c      	mov	r4, r7
 80005a2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80005a4:	c407      	stmia	r4!, {r0, r1, r2}
 80005a6:	8023      	strh	r3, [r4, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_UART_Transmit(&huart2, txData, sizeof(txData), 100);
 80005a8:	4639      	mov	r1, r7
 80005aa:	2364      	movs	r3, #100	@ 0x64
 80005ac:	220e      	movs	r2, #14
 80005ae:	4805      	ldr	r0, [pc, #20]	@ (80005c4 <main+0x3c>)
 80005b0:	f001 f980 	bl	80018b4 <HAL_UART_Transmit>
	  HAL_Delay(1000);
 80005b4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80005b8:	f000 f9ec 	bl	8000994 <HAL_Delay>
	  HAL_UART_Transmit(&huart2, txData, sizeof(txData), 100);
 80005bc:	bf00      	nop
 80005be:	e7f3      	b.n	80005a8 <main+0x20>
 80005c0:	0800209c 	.word	0x0800209c
 80005c4:	20000028 	.word	0x20000028

080005c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b094      	sub	sp, #80	@ 0x50
 80005cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ce:	f107 0320 	add.w	r3, r7, #32
 80005d2:	2230      	movs	r2, #48	@ 0x30
 80005d4:	2100      	movs	r1, #0
 80005d6:	4618      	mov	r0, r3
 80005d8:	f001 fd28 	bl	800202c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005dc:	f107 030c 	add.w	r3, r7, #12
 80005e0:	2200      	movs	r2, #0
 80005e2:	601a      	str	r2, [r3, #0]
 80005e4:	605a      	str	r2, [r3, #4]
 80005e6:	609a      	str	r2, [r3, #8]
 80005e8:	60da      	str	r2, [r3, #12]
 80005ea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005ec:	2300      	movs	r3, #0
 80005ee:	60bb      	str	r3, [r7, #8]
 80005f0:	4b27      	ldr	r3, [pc, #156]	@ (8000690 <SystemClock_Config+0xc8>)
 80005f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005f4:	4a26      	ldr	r2, [pc, #152]	@ (8000690 <SystemClock_Config+0xc8>)
 80005f6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005fa:	6413      	str	r3, [r2, #64]	@ 0x40
 80005fc:	4b24      	ldr	r3, [pc, #144]	@ (8000690 <SystemClock_Config+0xc8>)
 80005fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000600:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000604:	60bb      	str	r3, [r7, #8]
 8000606:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000608:	2300      	movs	r3, #0
 800060a:	607b      	str	r3, [r7, #4]
 800060c:	4b21      	ldr	r3, [pc, #132]	@ (8000694 <SystemClock_Config+0xcc>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	4a20      	ldr	r2, [pc, #128]	@ (8000694 <SystemClock_Config+0xcc>)
 8000612:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000616:	6013      	str	r3, [r2, #0]
 8000618:	4b1e      	ldr	r3, [pc, #120]	@ (8000694 <SystemClock_Config+0xcc>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000620:	607b      	str	r3, [r7, #4]
 8000622:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000624:	2301      	movs	r3, #1
 8000626:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000628:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800062c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800062e:	2302      	movs	r3, #2
 8000630:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000632:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000636:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000638:	2304      	movs	r3, #4
 800063a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 800063c:	2364      	movs	r3, #100	@ 0x64
 800063e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000640:	2302      	movs	r3, #2
 8000642:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000644:	2304      	movs	r3, #4
 8000646:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000648:	f107 0320 	add.w	r3, r7, #32
 800064c:	4618      	mov	r0, r3
 800064e:	f000 fc49 	bl	8000ee4 <HAL_RCC_OscConfig>
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	d001      	beq.n	800065c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000658:	f000 f81e 	bl	8000698 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800065c:	230f      	movs	r3, #15
 800065e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000660:	2302      	movs	r3, #2
 8000662:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000664:	2300      	movs	r3, #0
 8000666:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000668:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800066c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800066e:	2300      	movs	r3, #0
 8000670:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000672:	f107 030c 	add.w	r3, r7, #12
 8000676:	2103      	movs	r1, #3
 8000678:	4618      	mov	r0, r3
 800067a:	f000 feab 	bl	80013d4 <HAL_RCC_ClockConfig>
 800067e:	4603      	mov	r3, r0
 8000680:	2b00      	cmp	r3, #0
 8000682:	d001      	beq.n	8000688 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000684:	f000 f808 	bl	8000698 <Error_Handler>
  }
}
 8000688:	bf00      	nop
 800068a:	3750      	adds	r7, #80	@ 0x50
 800068c:	46bd      	mov	sp, r7
 800068e:	bd80      	pop	{r7, pc}
 8000690:	40023800 	.word	0x40023800
 8000694:	40007000 	.word	0x40007000

08000698 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000698:	b480      	push	{r7}
 800069a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800069c:	b672      	cpsid	i
}
 800069e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006a0:	bf00      	nop
 80006a2:	e7fd      	b.n	80006a0 <Error_Handler+0x8>

080006a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006a4:	b480      	push	{r7}
 80006a6:	b083      	sub	sp, #12
 80006a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006aa:	2300      	movs	r3, #0
 80006ac:	607b      	str	r3, [r7, #4]
 80006ae:	4b10      	ldr	r3, [pc, #64]	@ (80006f0 <HAL_MspInit+0x4c>)
 80006b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80006b2:	4a0f      	ldr	r2, [pc, #60]	@ (80006f0 <HAL_MspInit+0x4c>)
 80006b4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80006b8:	6453      	str	r3, [r2, #68]	@ 0x44
 80006ba:	4b0d      	ldr	r3, [pc, #52]	@ (80006f0 <HAL_MspInit+0x4c>)
 80006bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80006be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80006c2:	607b      	str	r3, [r7, #4]
 80006c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006c6:	2300      	movs	r3, #0
 80006c8:	603b      	str	r3, [r7, #0]
 80006ca:	4b09      	ldr	r3, [pc, #36]	@ (80006f0 <HAL_MspInit+0x4c>)
 80006cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006ce:	4a08      	ldr	r2, [pc, #32]	@ (80006f0 <HAL_MspInit+0x4c>)
 80006d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80006d6:	4b06      	ldr	r3, [pc, #24]	@ (80006f0 <HAL_MspInit+0x4c>)
 80006d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006de:	603b      	str	r3, [r7, #0]
 80006e0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006e2:	bf00      	nop
 80006e4:	370c      	adds	r7, #12
 80006e6:	46bd      	mov	sp, r7
 80006e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ec:	4770      	bx	lr
 80006ee:	bf00      	nop
 80006f0:	40023800 	.word	0x40023800

080006f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006f4:	b480      	push	{r7}
 80006f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80006f8:	bf00      	nop
 80006fa:	e7fd      	b.n	80006f8 <NMI_Handler+0x4>

080006fc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006fc:	b480      	push	{r7}
 80006fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000700:	bf00      	nop
 8000702:	e7fd      	b.n	8000700 <HardFault_Handler+0x4>

08000704 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000704:	b480      	push	{r7}
 8000706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000708:	bf00      	nop
 800070a:	e7fd      	b.n	8000708 <MemManage_Handler+0x4>

0800070c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800070c:	b480      	push	{r7}
 800070e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000710:	bf00      	nop
 8000712:	e7fd      	b.n	8000710 <BusFault_Handler+0x4>

08000714 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000714:	b480      	push	{r7}
 8000716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000718:	bf00      	nop
 800071a:	e7fd      	b.n	8000718 <UsageFault_Handler+0x4>

0800071c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800071c:	b480      	push	{r7}
 800071e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000720:	bf00      	nop
 8000722:	46bd      	mov	sp, r7
 8000724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000728:	4770      	bx	lr

0800072a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800072a:	b480      	push	{r7}
 800072c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800072e:	bf00      	nop
 8000730:	46bd      	mov	sp, r7
 8000732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000736:	4770      	bx	lr

08000738 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000738:	b480      	push	{r7}
 800073a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800073c:	bf00      	nop
 800073e:	46bd      	mov	sp, r7
 8000740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000744:	4770      	bx	lr

08000746 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000746:	b580      	push	{r7, lr}
 8000748:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800074a:	f000 f903 	bl	8000954 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800074e:	bf00      	nop
 8000750:	bd80      	pop	{r7, pc}
	...

08000754 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000754:	b480      	push	{r7}
 8000756:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000758:	4b06      	ldr	r3, [pc, #24]	@ (8000774 <SystemInit+0x20>)
 800075a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800075e:	4a05      	ldr	r2, [pc, #20]	@ (8000774 <SystemInit+0x20>)
 8000760:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000764:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000768:	bf00      	nop
 800076a:	46bd      	mov	sp, r7
 800076c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000770:	4770      	bx	lr
 8000772:	bf00      	nop
 8000774:	e000ed00 	.word	0xe000ed00

08000778 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800077c:	4b11      	ldr	r3, [pc, #68]	@ (80007c4 <MX_USART2_UART_Init+0x4c>)
 800077e:	4a12      	ldr	r2, [pc, #72]	@ (80007c8 <MX_USART2_UART_Init+0x50>)
 8000780:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000782:	4b10      	ldr	r3, [pc, #64]	@ (80007c4 <MX_USART2_UART_Init+0x4c>)
 8000784:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000788:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800078a:	4b0e      	ldr	r3, [pc, #56]	@ (80007c4 <MX_USART2_UART_Init+0x4c>)
 800078c:	2200      	movs	r2, #0
 800078e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000790:	4b0c      	ldr	r3, [pc, #48]	@ (80007c4 <MX_USART2_UART_Init+0x4c>)
 8000792:	2200      	movs	r2, #0
 8000794:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000796:	4b0b      	ldr	r3, [pc, #44]	@ (80007c4 <MX_USART2_UART_Init+0x4c>)
 8000798:	2200      	movs	r2, #0
 800079a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800079c:	4b09      	ldr	r3, [pc, #36]	@ (80007c4 <MX_USART2_UART_Init+0x4c>)
 800079e:	220c      	movs	r2, #12
 80007a0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007a2:	4b08      	ldr	r3, [pc, #32]	@ (80007c4 <MX_USART2_UART_Init+0x4c>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007a8:	4b06      	ldr	r3, [pc, #24]	@ (80007c4 <MX_USART2_UART_Init+0x4c>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007ae:	4805      	ldr	r0, [pc, #20]	@ (80007c4 <MX_USART2_UART_Init+0x4c>)
 80007b0:	f001 f830 	bl	8001814 <HAL_UART_Init>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d001      	beq.n	80007be <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80007ba:	f7ff ff6d 	bl	8000698 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007be:	bf00      	nop
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	20000028 	.word	0x20000028
 80007c8:	40004400 	.word	0x40004400

080007cc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b08a      	sub	sp, #40	@ 0x28
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007d4:	f107 0314 	add.w	r3, r7, #20
 80007d8:	2200      	movs	r2, #0
 80007da:	601a      	str	r2, [r3, #0]
 80007dc:	605a      	str	r2, [r3, #4]
 80007de:	609a      	str	r2, [r3, #8]
 80007e0:	60da      	str	r2, [r3, #12]
 80007e2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	4a19      	ldr	r2, [pc, #100]	@ (8000850 <HAL_UART_MspInit+0x84>)
 80007ea:	4293      	cmp	r3, r2
 80007ec:	d12b      	bne.n	8000846 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80007ee:	2300      	movs	r3, #0
 80007f0:	613b      	str	r3, [r7, #16]
 80007f2:	4b18      	ldr	r3, [pc, #96]	@ (8000854 <HAL_UART_MspInit+0x88>)
 80007f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007f6:	4a17      	ldr	r2, [pc, #92]	@ (8000854 <HAL_UART_MspInit+0x88>)
 80007f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80007fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80007fe:	4b15      	ldr	r3, [pc, #84]	@ (8000854 <HAL_UART_MspInit+0x88>)
 8000800:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000802:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000806:	613b      	str	r3, [r7, #16]
 8000808:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800080a:	2300      	movs	r3, #0
 800080c:	60fb      	str	r3, [r7, #12]
 800080e:	4b11      	ldr	r3, [pc, #68]	@ (8000854 <HAL_UART_MspInit+0x88>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000812:	4a10      	ldr	r2, [pc, #64]	@ (8000854 <HAL_UART_MspInit+0x88>)
 8000814:	f043 0301 	orr.w	r3, r3, #1
 8000818:	6313      	str	r3, [r2, #48]	@ 0x30
 800081a:	4b0e      	ldr	r3, [pc, #56]	@ (8000854 <HAL_UART_MspInit+0x88>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800081e:	f003 0301 	and.w	r3, r3, #1
 8000822:	60fb      	str	r3, [r7, #12]
 8000824:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000826:	230c      	movs	r3, #12
 8000828:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800082a:	2302      	movs	r3, #2
 800082c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082e:	2300      	movs	r3, #0
 8000830:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000832:	2303      	movs	r3, #3
 8000834:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000836:	2307      	movs	r3, #7
 8000838:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800083a:	f107 0314 	add.w	r3, r7, #20
 800083e:	4619      	mov	r1, r3
 8000840:	4805      	ldr	r0, [pc, #20]	@ (8000858 <HAL_UART_MspInit+0x8c>)
 8000842:	f000 f9b1 	bl	8000ba8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000846:	bf00      	nop
 8000848:	3728      	adds	r7, #40	@ 0x28
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	40004400 	.word	0x40004400
 8000854:	40023800 	.word	0x40023800
 8000858:	40020000 	.word	0x40020000

0800085c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800085c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000894 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000860:	f7ff ff78 	bl	8000754 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000864:	480c      	ldr	r0, [pc, #48]	@ (8000898 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000866:	490d      	ldr	r1, [pc, #52]	@ (800089c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000868:	4a0d      	ldr	r2, [pc, #52]	@ (80008a0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800086a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800086c:	e002      	b.n	8000874 <LoopCopyDataInit>

0800086e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800086e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000870:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000872:	3304      	adds	r3, #4

08000874 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000874:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000876:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000878:	d3f9      	bcc.n	800086e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800087a:	4a0a      	ldr	r2, [pc, #40]	@ (80008a4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800087c:	4c0a      	ldr	r4, [pc, #40]	@ (80008a8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800087e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000880:	e001      	b.n	8000886 <LoopFillZerobss>

08000882 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000882:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000884:	3204      	adds	r2, #4

08000886 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000886:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000888:	d3fb      	bcc.n	8000882 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800088a:	f001 fbd7 	bl	800203c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800088e:	f7ff fe7b 	bl	8000588 <main>
  bx  lr    
 8000892:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000894:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000898:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800089c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80008a0:	080020d4 	.word	0x080020d4
  ldr r2, =_sbss
 80008a4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80008a8:	20000074 	.word	0x20000074

080008ac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80008ac:	e7fe      	b.n	80008ac <ADC_IRQHandler>
	...

080008b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80008b4:	4b0e      	ldr	r3, [pc, #56]	@ (80008f0 <HAL_Init+0x40>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	4a0d      	ldr	r2, [pc, #52]	@ (80008f0 <HAL_Init+0x40>)
 80008ba:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80008be:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80008c0:	4b0b      	ldr	r3, [pc, #44]	@ (80008f0 <HAL_Init+0x40>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	4a0a      	ldr	r2, [pc, #40]	@ (80008f0 <HAL_Init+0x40>)
 80008c6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80008ca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008cc:	4b08      	ldr	r3, [pc, #32]	@ (80008f0 <HAL_Init+0x40>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	4a07      	ldr	r2, [pc, #28]	@ (80008f0 <HAL_Init+0x40>)
 80008d2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80008d6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008d8:	2003      	movs	r0, #3
 80008da:	f000 f931 	bl	8000b40 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008de:	200f      	movs	r0, #15
 80008e0:	f000 f808 	bl	80008f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008e4:	f7ff fede 	bl	80006a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008e8:	2300      	movs	r3, #0
}
 80008ea:	4618      	mov	r0, r3
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	40023c00 	.word	0x40023c00

080008f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b082      	sub	sp, #8
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008fc:	4b12      	ldr	r3, [pc, #72]	@ (8000948 <HAL_InitTick+0x54>)
 80008fe:	681a      	ldr	r2, [r3, #0]
 8000900:	4b12      	ldr	r3, [pc, #72]	@ (800094c <HAL_InitTick+0x58>)
 8000902:	781b      	ldrb	r3, [r3, #0]
 8000904:	4619      	mov	r1, r3
 8000906:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800090a:	fbb3 f3f1 	udiv	r3, r3, r1
 800090e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000912:	4618      	mov	r0, r3
 8000914:	f000 f93b 	bl	8000b8e <HAL_SYSTICK_Config>
 8000918:	4603      	mov	r3, r0
 800091a:	2b00      	cmp	r3, #0
 800091c:	d001      	beq.n	8000922 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800091e:	2301      	movs	r3, #1
 8000920:	e00e      	b.n	8000940 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	2b0f      	cmp	r3, #15
 8000926:	d80a      	bhi.n	800093e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000928:	2200      	movs	r2, #0
 800092a:	6879      	ldr	r1, [r7, #4]
 800092c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000930:	f000 f911 	bl	8000b56 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000934:	4a06      	ldr	r2, [pc, #24]	@ (8000950 <HAL_InitTick+0x5c>)
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800093a:	2300      	movs	r3, #0
 800093c:	e000      	b.n	8000940 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800093e:	2301      	movs	r3, #1
}
 8000940:	4618      	mov	r0, r3
 8000942:	3708      	adds	r7, #8
 8000944:	46bd      	mov	sp, r7
 8000946:	bd80      	pop	{r7, pc}
 8000948:	20000000 	.word	0x20000000
 800094c:	20000008 	.word	0x20000008
 8000950:	20000004 	.word	0x20000004

08000954 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000954:	b480      	push	{r7}
 8000956:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000958:	4b06      	ldr	r3, [pc, #24]	@ (8000974 <HAL_IncTick+0x20>)
 800095a:	781b      	ldrb	r3, [r3, #0]
 800095c:	461a      	mov	r2, r3
 800095e:	4b06      	ldr	r3, [pc, #24]	@ (8000978 <HAL_IncTick+0x24>)
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	4413      	add	r3, r2
 8000964:	4a04      	ldr	r2, [pc, #16]	@ (8000978 <HAL_IncTick+0x24>)
 8000966:	6013      	str	r3, [r2, #0]
}
 8000968:	bf00      	nop
 800096a:	46bd      	mov	sp, r7
 800096c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000970:	4770      	bx	lr
 8000972:	bf00      	nop
 8000974:	20000008 	.word	0x20000008
 8000978:	20000070 	.word	0x20000070

0800097c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0
  return uwTick;
 8000980:	4b03      	ldr	r3, [pc, #12]	@ (8000990 <HAL_GetTick+0x14>)
 8000982:	681b      	ldr	r3, [r3, #0]
}
 8000984:	4618      	mov	r0, r3
 8000986:	46bd      	mov	sp, r7
 8000988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098c:	4770      	bx	lr
 800098e:	bf00      	nop
 8000990:	20000070 	.word	0x20000070

08000994 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b084      	sub	sp, #16
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800099c:	f7ff ffee 	bl	800097c <HAL_GetTick>
 80009a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80009a6:	68fb      	ldr	r3, [r7, #12]
 80009a8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80009ac:	d005      	beq.n	80009ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80009ae:	4b0a      	ldr	r3, [pc, #40]	@ (80009d8 <HAL_Delay+0x44>)
 80009b0:	781b      	ldrb	r3, [r3, #0]
 80009b2:	461a      	mov	r2, r3
 80009b4:	68fb      	ldr	r3, [r7, #12]
 80009b6:	4413      	add	r3, r2
 80009b8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80009ba:	bf00      	nop
 80009bc:	f7ff ffde 	bl	800097c <HAL_GetTick>
 80009c0:	4602      	mov	r2, r0
 80009c2:	68bb      	ldr	r3, [r7, #8]
 80009c4:	1ad3      	subs	r3, r2, r3
 80009c6:	68fa      	ldr	r2, [r7, #12]
 80009c8:	429a      	cmp	r2, r3
 80009ca:	d8f7      	bhi.n	80009bc <HAL_Delay+0x28>
  {
  }
}
 80009cc:	bf00      	nop
 80009ce:	bf00      	nop
 80009d0:	3710      	adds	r7, #16
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	20000008 	.word	0x20000008

080009dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009dc:	b480      	push	{r7}
 80009de:	b085      	sub	sp, #20
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	f003 0307 	and.w	r3, r3, #7
 80009ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009ec:	4b0c      	ldr	r3, [pc, #48]	@ (8000a20 <__NVIC_SetPriorityGrouping+0x44>)
 80009ee:	68db      	ldr	r3, [r3, #12]
 80009f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009f2:	68ba      	ldr	r2, [r7, #8]
 80009f4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80009f8:	4013      	ands	r3, r2
 80009fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80009fc:	68fb      	ldr	r3, [r7, #12]
 80009fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a00:	68bb      	ldr	r3, [r7, #8]
 8000a02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a04:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000a08:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a0e:	4a04      	ldr	r2, [pc, #16]	@ (8000a20 <__NVIC_SetPriorityGrouping+0x44>)
 8000a10:	68bb      	ldr	r3, [r7, #8]
 8000a12:	60d3      	str	r3, [r2, #12]
}
 8000a14:	bf00      	nop
 8000a16:	3714      	adds	r7, #20
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1e:	4770      	bx	lr
 8000a20:	e000ed00 	.word	0xe000ed00

08000a24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a28:	4b04      	ldr	r3, [pc, #16]	@ (8000a3c <__NVIC_GetPriorityGrouping+0x18>)
 8000a2a:	68db      	ldr	r3, [r3, #12]
 8000a2c:	0a1b      	lsrs	r3, r3, #8
 8000a2e:	f003 0307 	and.w	r3, r3, #7
}
 8000a32:	4618      	mov	r0, r3
 8000a34:	46bd      	mov	sp, r7
 8000a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3a:	4770      	bx	lr
 8000a3c:	e000ed00 	.word	0xe000ed00

08000a40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a40:	b480      	push	{r7}
 8000a42:	b083      	sub	sp, #12
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	4603      	mov	r3, r0
 8000a48:	6039      	str	r1, [r7, #0]
 8000a4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	db0a      	blt.n	8000a6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a54:	683b      	ldr	r3, [r7, #0]
 8000a56:	b2da      	uxtb	r2, r3
 8000a58:	490c      	ldr	r1, [pc, #48]	@ (8000a8c <__NVIC_SetPriority+0x4c>)
 8000a5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a5e:	0112      	lsls	r2, r2, #4
 8000a60:	b2d2      	uxtb	r2, r2
 8000a62:	440b      	add	r3, r1
 8000a64:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a68:	e00a      	b.n	8000a80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a6a:	683b      	ldr	r3, [r7, #0]
 8000a6c:	b2da      	uxtb	r2, r3
 8000a6e:	4908      	ldr	r1, [pc, #32]	@ (8000a90 <__NVIC_SetPriority+0x50>)
 8000a70:	79fb      	ldrb	r3, [r7, #7]
 8000a72:	f003 030f 	and.w	r3, r3, #15
 8000a76:	3b04      	subs	r3, #4
 8000a78:	0112      	lsls	r2, r2, #4
 8000a7a:	b2d2      	uxtb	r2, r2
 8000a7c:	440b      	add	r3, r1
 8000a7e:	761a      	strb	r2, [r3, #24]
}
 8000a80:	bf00      	nop
 8000a82:	370c      	adds	r7, #12
 8000a84:	46bd      	mov	sp, r7
 8000a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8a:	4770      	bx	lr
 8000a8c:	e000e100 	.word	0xe000e100
 8000a90:	e000ed00 	.word	0xe000ed00

08000a94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a94:	b480      	push	{r7}
 8000a96:	b089      	sub	sp, #36	@ 0x24
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	60f8      	str	r0, [r7, #12]
 8000a9c:	60b9      	str	r1, [r7, #8]
 8000a9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000aa0:	68fb      	ldr	r3, [r7, #12]
 8000aa2:	f003 0307 	and.w	r3, r3, #7
 8000aa6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000aa8:	69fb      	ldr	r3, [r7, #28]
 8000aaa:	f1c3 0307 	rsb	r3, r3, #7
 8000aae:	2b04      	cmp	r3, #4
 8000ab0:	bf28      	it	cs
 8000ab2:	2304      	movcs	r3, #4
 8000ab4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ab6:	69fb      	ldr	r3, [r7, #28]
 8000ab8:	3304      	adds	r3, #4
 8000aba:	2b06      	cmp	r3, #6
 8000abc:	d902      	bls.n	8000ac4 <NVIC_EncodePriority+0x30>
 8000abe:	69fb      	ldr	r3, [r7, #28]
 8000ac0:	3b03      	subs	r3, #3
 8000ac2:	e000      	b.n	8000ac6 <NVIC_EncodePriority+0x32>
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ac8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000acc:	69bb      	ldr	r3, [r7, #24]
 8000ace:	fa02 f303 	lsl.w	r3, r2, r3
 8000ad2:	43da      	mvns	r2, r3
 8000ad4:	68bb      	ldr	r3, [r7, #8]
 8000ad6:	401a      	ands	r2, r3
 8000ad8:	697b      	ldr	r3, [r7, #20]
 8000ada:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000adc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000ae0:	697b      	ldr	r3, [r7, #20]
 8000ae2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ae6:	43d9      	mvns	r1, r3
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000aec:	4313      	orrs	r3, r2
         );
}
 8000aee:	4618      	mov	r0, r3
 8000af0:	3724      	adds	r7, #36	@ 0x24
 8000af2:	46bd      	mov	sp, r7
 8000af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af8:	4770      	bx	lr
	...

08000afc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b082      	sub	sp, #8
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	3b01      	subs	r3, #1
 8000b08:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000b0c:	d301      	bcc.n	8000b12 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b0e:	2301      	movs	r3, #1
 8000b10:	e00f      	b.n	8000b32 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b12:	4a0a      	ldr	r2, [pc, #40]	@ (8000b3c <SysTick_Config+0x40>)
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	3b01      	subs	r3, #1
 8000b18:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b1a:	210f      	movs	r1, #15
 8000b1c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000b20:	f7ff ff8e 	bl	8000a40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b24:	4b05      	ldr	r3, [pc, #20]	@ (8000b3c <SysTick_Config+0x40>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b2a:	4b04      	ldr	r3, [pc, #16]	@ (8000b3c <SysTick_Config+0x40>)
 8000b2c:	2207      	movs	r2, #7
 8000b2e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b30:	2300      	movs	r3, #0
}
 8000b32:	4618      	mov	r0, r3
 8000b34:	3708      	adds	r7, #8
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	e000e010 	.word	0xe000e010

08000b40 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b082      	sub	sp, #8
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b48:	6878      	ldr	r0, [r7, #4]
 8000b4a:	f7ff ff47 	bl	80009dc <__NVIC_SetPriorityGrouping>
}
 8000b4e:	bf00      	nop
 8000b50:	3708      	adds	r7, #8
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}

08000b56 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b56:	b580      	push	{r7, lr}
 8000b58:	b086      	sub	sp, #24
 8000b5a:	af00      	add	r7, sp, #0
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	60b9      	str	r1, [r7, #8]
 8000b60:	607a      	str	r2, [r7, #4]
 8000b62:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b64:	2300      	movs	r3, #0
 8000b66:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b68:	f7ff ff5c 	bl	8000a24 <__NVIC_GetPriorityGrouping>
 8000b6c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b6e:	687a      	ldr	r2, [r7, #4]
 8000b70:	68b9      	ldr	r1, [r7, #8]
 8000b72:	6978      	ldr	r0, [r7, #20]
 8000b74:	f7ff ff8e 	bl	8000a94 <NVIC_EncodePriority>
 8000b78:	4602      	mov	r2, r0
 8000b7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b7e:	4611      	mov	r1, r2
 8000b80:	4618      	mov	r0, r3
 8000b82:	f7ff ff5d 	bl	8000a40 <__NVIC_SetPriority>
}
 8000b86:	bf00      	nop
 8000b88:	3718      	adds	r7, #24
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}

08000b8e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b8e:	b580      	push	{r7, lr}
 8000b90:	b082      	sub	sp, #8
 8000b92:	af00      	add	r7, sp, #0
 8000b94:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b96:	6878      	ldr	r0, [r7, #4]
 8000b98:	f7ff ffb0 	bl	8000afc <SysTick_Config>
 8000b9c:	4603      	mov	r3, r0
}
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	3708      	adds	r7, #8
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}
	...

08000ba8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	b089      	sub	sp, #36	@ 0x24
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
 8000bb0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	61fb      	str	r3, [r7, #28]
 8000bc2:	e159      	b.n	8000e78 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000bc4:	2201      	movs	r2, #1
 8000bc6:	69fb      	ldr	r3, [r7, #28]
 8000bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bcc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000bce:	683b      	ldr	r3, [r7, #0]
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	697a      	ldr	r2, [r7, #20]
 8000bd4:	4013      	ands	r3, r2
 8000bd6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000bd8:	693a      	ldr	r2, [r7, #16]
 8000bda:	697b      	ldr	r3, [r7, #20]
 8000bdc:	429a      	cmp	r2, r3
 8000bde:	f040 8148 	bne.w	8000e72 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000be2:	683b      	ldr	r3, [r7, #0]
 8000be4:	685b      	ldr	r3, [r3, #4]
 8000be6:	f003 0303 	and.w	r3, r3, #3
 8000bea:	2b01      	cmp	r3, #1
 8000bec:	d005      	beq.n	8000bfa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000bee:	683b      	ldr	r3, [r7, #0]
 8000bf0:	685b      	ldr	r3, [r3, #4]
 8000bf2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000bf6:	2b02      	cmp	r3, #2
 8000bf8:	d130      	bne.n	8000c5c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	689b      	ldr	r3, [r3, #8]
 8000bfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000c00:	69fb      	ldr	r3, [r7, #28]
 8000c02:	005b      	lsls	r3, r3, #1
 8000c04:	2203      	movs	r2, #3
 8000c06:	fa02 f303 	lsl.w	r3, r2, r3
 8000c0a:	43db      	mvns	r3, r3
 8000c0c:	69ba      	ldr	r2, [r7, #24]
 8000c0e:	4013      	ands	r3, r2
 8000c10:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c12:	683b      	ldr	r3, [r7, #0]
 8000c14:	68da      	ldr	r2, [r3, #12]
 8000c16:	69fb      	ldr	r3, [r7, #28]
 8000c18:	005b      	lsls	r3, r3, #1
 8000c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c1e:	69ba      	ldr	r2, [r7, #24]
 8000c20:	4313      	orrs	r3, r2
 8000c22:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	69ba      	ldr	r2, [r7, #24]
 8000c28:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	685b      	ldr	r3, [r3, #4]
 8000c2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c30:	2201      	movs	r2, #1
 8000c32:	69fb      	ldr	r3, [r7, #28]
 8000c34:	fa02 f303 	lsl.w	r3, r2, r3
 8000c38:	43db      	mvns	r3, r3
 8000c3a:	69ba      	ldr	r2, [r7, #24]
 8000c3c:	4013      	ands	r3, r2
 8000c3e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c40:	683b      	ldr	r3, [r7, #0]
 8000c42:	685b      	ldr	r3, [r3, #4]
 8000c44:	091b      	lsrs	r3, r3, #4
 8000c46:	f003 0201 	and.w	r2, r3, #1
 8000c4a:	69fb      	ldr	r3, [r7, #28]
 8000c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c50:	69ba      	ldr	r2, [r7, #24]
 8000c52:	4313      	orrs	r3, r2
 8000c54:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	69ba      	ldr	r2, [r7, #24]
 8000c5a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c5c:	683b      	ldr	r3, [r7, #0]
 8000c5e:	685b      	ldr	r3, [r3, #4]
 8000c60:	f003 0303 	and.w	r3, r3, #3
 8000c64:	2b03      	cmp	r3, #3
 8000c66:	d017      	beq.n	8000c98 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	68db      	ldr	r3, [r3, #12]
 8000c6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000c6e:	69fb      	ldr	r3, [r7, #28]
 8000c70:	005b      	lsls	r3, r3, #1
 8000c72:	2203      	movs	r2, #3
 8000c74:	fa02 f303 	lsl.w	r3, r2, r3
 8000c78:	43db      	mvns	r3, r3
 8000c7a:	69ba      	ldr	r2, [r7, #24]
 8000c7c:	4013      	ands	r3, r2
 8000c7e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000c80:	683b      	ldr	r3, [r7, #0]
 8000c82:	689a      	ldr	r2, [r3, #8]
 8000c84:	69fb      	ldr	r3, [r7, #28]
 8000c86:	005b      	lsls	r3, r3, #1
 8000c88:	fa02 f303 	lsl.w	r3, r2, r3
 8000c8c:	69ba      	ldr	r2, [r7, #24]
 8000c8e:	4313      	orrs	r3, r2
 8000c90:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	69ba      	ldr	r2, [r7, #24]
 8000c96:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c98:	683b      	ldr	r3, [r7, #0]
 8000c9a:	685b      	ldr	r3, [r3, #4]
 8000c9c:	f003 0303 	and.w	r3, r3, #3
 8000ca0:	2b02      	cmp	r3, #2
 8000ca2:	d123      	bne.n	8000cec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000ca4:	69fb      	ldr	r3, [r7, #28]
 8000ca6:	08da      	lsrs	r2, r3, #3
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	3208      	adds	r2, #8
 8000cac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000cb0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000cb2:	69fb      	ldr	r3, [r7, #28]
 8000cb4:	f003 0307 	and.w	r3, r3, #7
 8000cb8:	009b      	lsls	r3, r3, #2
 8000cba:	220f      	movs	r2, #15
 8000cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc0:	43db      	mvns	r3, r3
 8000cc2:	69ba      	ldr	r2, [r7, #24]
 8000cc4:	4013      	ands	r3, r2
 8000cc6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000cc8:	683b      	ldr	r3, [r7, #0]
 8000cca:	691a      	ldr	r2, [r3, #16]
 8000ccc:	69fb      	ldr	r3, [r7, #28]
 8000cce:	f003 0307 	and.w	r3, r3, #7
 8000cd2:	009b      	lsls	r3, r3, #2
 8000cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd8:	69ba      	ldr	r2, [r7, #24]
 8000cda:	4313      	orrs	r3, r2
 8000cdc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000cde:	69fb      	ldr	r3, [r7, #28]
 8000ce0:	08da      	lsrs	r2, r3, #3
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	3208      	adds	r2, #8
 8000ce6:	69b9      	ldr	r1, [r7, #24]
 8000ce8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000cf2:	69fb      	ldr	r3, [r7, #28]
 8000cf4:	005b      	lsls	r3, r3, #1
 8000cf6:	2203      	movs	r2, #3
 8000cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cfc:	43db      	mvns	r3, r3
 8000cfe:	69ba      	ldr	r2, [r7, #24]
 8000d00:	4013      	ands	r3, r2
 8000d02:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d04:	683b      	ldr	r3, [r7, #0]
 8000d06:	685b      	ldr	r3, [r3, #4]
 8000d08:	f003 0203 	and.w	r2, r3, #3
 8000d0c:	69fb      	ldr	r3, [r7, #28]
 8000d0e:	005b      	lsls	r3, r3, #1
 8000d10:	fa02 f303 	lsl.w	r3, r2, r3
 8000d14:	69ba      	ldr	r2, [r7, #24]
 8000d16:	4313      	orrs	r3, r2
 8000d18:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	69ba      	ldr	r2, [r7, #24]
 8000d1e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000d20:	683b      	ldr	r3, [r7, #0]
 8000d22:	685b      	ldr	r3, [r3, #4]
 8000d24:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	f000 80a2 	beq.w	8000e72 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d2e:	2300      	movs	r3, #0
 8000d30:	60fb      	str	r3, [r7, #12]
 8000d32:	4b57      	ldr	r3, [pc, #348]	@ (8000e90 <HAL_GPIO_Init+0x2e8>)
 8000d34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d36:	4a56      	ldr	r2, [pc, #344]	@ (8000e90 <HAL_GPIO_Init+0x2e8>)
 8000d38:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d3c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d3e:	4b54      	ldr	r3, [pc, #336]	@ (8000e90 <HAL_GPIO_Init+0x2e8>)
 8000d40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d42:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d46:	60fb      	str	r3, [r7, #12]
 8000d48:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000d4a:	4a52      	ldr	r2, [pc, #328]	@ (8000e94 <HAL_GPIO_Init+0x2ec>)
 8000d4c:	69fb      	ldr	r3, [r7, #28]
 8000d4e:	089b      	lsrs	r3, r3, #2
 8000d50:	3302      	adds	r3, #2
 8000d52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d56:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000d58:	69fb      	ldr	r3, [r7, #28]
 8000d5a:	f003 0303 	and.w	r3, r3, #3
 8000d5e:	009b      	lsls	r3, r3, #2
 8000d60:	220f      	movs	r2, #15
 8000d62:	fa02 f303 	lsl.w	r3, r2, r3
 8000d66:	43db      	mvns	r3, r3
 8000d68:	69ba      	ldr	r2, [r7, #24]
 8000d6a:	4013      	ands	r3, r2
 8000d6c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	4a49      	ldr	r2, [pc, #292]	@ (8000e98 <HAL_GPIO_Init+0x2f0>)
 8000d72:	4293      	cmp	r3, r2
 8000d74:	d019      	beq.n	8000daa <HAL_GPIO_Init+0x202>
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	4a48      	ldr	r2, [pc, #288]	@ (8000e9c <HAL_GPIO_Init+0x2f4>)
 8000d7a:	4293      	cmp	r3, r2
 8000d7c:	d013      	beq.n	8000da6 <HAL_GPIO_Init+0x1fe>
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	4a47      	ldr	r2, [pc, #284]	@ (8000ea0 <HAL_GPIO_Init+0x2f8>)
 8000d82:	4293      	cmp	r3, r2
 8000d84:	d00d      	beq.n	8000da2 <HAL_GPIO_Init+0x1fa>
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	4a46      	ldr	r2, [pc, #280]	@ (8000ea4 <HAL_GPIO_Init+0x2fc>)
 8000d8a:	4293      	cmp	r3, r2
 8000d8c:	d007      	beq.n	8000d9e <HAL_GPIO_Init+0x1f6>
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	4a45      	ldr	r2, [pc, #276]	@ (8000ea8 <HAL_GPIO_Init+0x300>)
 8000d92:	4293      	cmp	r3, r2
 8000d94:	d101      	bne.n	8000d9a <HAL_GPIO_Init+0x1f2>
 8000d96:	2304      	movs	r3, #4
 8000d98:	e008      	b.n	8000dac <HAL_GPIO_Init+0x204>
 8000d9a:	2307      	movs	r3, #7
 8000d9c:	e006      	b.n	8000dac <HAL_GPIO_Init+0x204>
 8000d9e:	2303      	movs	r3, #3
 8000da0:	e004      	b.n	8000dac <HAL_GPIO_Init+0x204>
 8000da2:	2302      	movs	r3, #2
 8000da4:	e002      	b.n	8000dac <HAL_GPIO_Init+0x204>
 8000da6:	2301      	movs	r3, #1
 8000da8:	e000      	b.n	8000dac <HAL_GPIO_Init+0x204>
 8000daa:	2300      	movs	r3, #0
 8000dac:	69fa      	ldr	r2, [r7, #28]
 8000dae:	f002 0203 	and.w	r2, r2, #3
 8000db2:	0092      	lsls	r2, r2, #2
 8000db4:	4093      	lsls	r3, r2
 8000db6:	69ba      	ldr	r2, [r7, #24]
 8000db8:	4313      	orrs	r3, r2
 8000dba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000dbc:	4935      	ldr	r1, [pc, #212]	@ (8000e94 <HAL_GPIO_Init+0x2ec>)
 8000dbe:	69fb      	ldr	r3, [r7, #28]
 8000dc0:	089b      	lsrs	r3, r3, #2
 8000dc2:	3302      	adds	r3, #2
 8000dc4:	69ba      	ldr	r2, [r7, #24]
 8000dc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000dca:	4b38      	ldr	r3, [pc, #224]	@ (8000eac <HAL_GPIO_Init+0x304>)
 8000dcc:	689b      	ldr	r3, [r3, #8]
 8000dce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000dd0:	693b      	ldr	r3, [r7, #16]
 8000dd2:	43db      	mvns	r3, r3
 8000dd4:	69ba      	ldr	r2, [r7, #24]
 8000dd6:	4013      	ands	r3, r2
 8000dd8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	685b      	ldr	r3, [r3, #4]
 8000dde:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d003      	beq.n	8000dee <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000de6:	69ba      	ldr	r2, [r7, #24]
 8000de8:	693b      	ldr	r3, [r7, #16]
 8000dea:	4313      	orrs	r3, r2
 8000dec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000dee:	4a2f      	ldr	r2, [pc, #188]	@ (8000eac <HAL_GPIO_Init+0x304>)
 8000df0:	69bb      	ldr	r3, [r7, #24]
 8000df2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000df4:	4b2d      	ldr	r3, [pc, #180]	@ (8000eac <HAL_GPIO_Init+0x304>)
 8000df6:	68db      	ldr	r3, [r3, #12]
 8000df8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000dfa:	693b      	ldr	r3, [r7, #16]
 8000dfc:	43db      	mvns	r3, r3
 8000dfe:	69ba      	ldr	r2, [r7, #24]
 8000e00:	4013      	ands	r3, r2
 8000e02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	685b      	ldr	r3, [r3, #4]
 8000e08:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d003      	beq.n	8000e18 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000e10:	69ba      	ldr	r2, [r7, #24]
 8000e12:	693b      	ldr	r3, [r7, #16]
 8000e14:	4313      	orrs	r3, r2
 8000e16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000e18:	4a24      	ldr	r2, [pc, #144]	@ (8000eac <HAL_GPIO_Init+0x304>)
 8000e1a:	69bb      	ldr	r3, [r7, #24]
 8000e1c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000e1e:	4b23      	ldr	r3, [pc, #140]	@ (8000eac <HAL_GPIO_Init+0x304>)
 8000e20:	685b      	ldr	r3, [r3, #4]
 8000e22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e24:	693b      	ldr	r3, [r7, #16]
 8000e26:	43db      	mvns	r3, r3
 8000e28:	69ba      	ldr	r2, [r7, #24]
 8000e2a:	4013      	ands	r3, r2
 8000e2c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000e2e:	683b      	ldr	r3, [r7, #0]
 8000e30:	685b      	ldr	r3, [r3, #4]
 8000e32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d003      	beq.n	8000e42 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000e3a:	69ba      	ldr	r2, [r7, #24]
 8000e3c:	693b      	ldr	r3, [r7, #16]
 8000e3e:	4313      	orrs	r3, r2
 8000e40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000e42:	4a1a      	ldr	r2, [pc, #104]	@ (8000eac <HAL_GPIO_Init+0x304>)
 8000e44:	69bb      	ldr	r3, [r7, #24]
 8000e46:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e48:	4b18      	ldr	r3, [pc, #96]	@ (8000eac <HAL_GPIO_Init+0x304>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e4e:	693b      	ldr	r3, [r7, #16]
 8000e50:	43db      	mvns	r3, r3
 8000e52:	69ba      	ldr	r2, [r7, #24]
 8000e54:	4013      	ands	r3, r2
 8000e56:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	685b      	ldr	r3, [r3, #4]
 8000e5c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d003      	beq.n	8000e6c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000e64:	69ba      	ldr	r2, [r7, #24]
 8000e66:	693b      	ldr	r3, [r7, #16]
 8000e68:	4313      	orrs	r3, r2
 8000e6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000e6c:	4a0f      	ldr	r2, [pc, #60]	@ (8000eac <HAL_GPIO_Init+0x304>)
 8000e6e:	69bb      	ldr	r3, [r7, #24]
 8000e70:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e72:	69fb      	ldr	r3, [r7, #28]
 8000e74:	3301      	adds	r3, #1
 8000e76:	61fb      	str	r3, [r7, #28]
 8000e78:	69fb      	ldr	r3, [r7, #28]
 8000e7a:	2b0f      	cmp	r3, #15
 8000e7c:	f67f aea2 	bls.w	8000bc4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000e80:	bf00      	nop
 8000e82:	bf00      	nop
 8000e84:	3724      	adds	r7, #36	@ 0x24
 8000e86:	46bd      	mov	sp, r7
 8000e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8c:	4770      	bx	lr
 8000e8e:	bf00      	nop
 8000e90:	40023800 	.word	0x40023800
 8000e94:	40013800 	.word	0x40013800
 8000e98:	40020000 	.word	0x40020000
 8000e9c:	40020400 	.word	0x40020400
 8000ea0:	40020800 	.word	0x40020800
 8000ea4:	40020c00 	.word	0x40020c00
 8000ea8:	40021000 	.word	0x40021000
 8000eac:	40013c00 	.word	0x40013c00

08000eb0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	b083      	sub	sp, #12
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
 8000eb8:	460b      	mov	r3, r1
 8000eba:	807b      	strh	r3, [r7, #2]
 8000ebc:	4613      	mov	r3, r2
 8000ebe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000ec0:	787b      	ldrb	r3, [r7, #1]
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d003      	beq.n	8000ece <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000ec6:	887a      	ldrh	r2, [r7, #2]
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000ecc:	e003      	b.n	8000ed6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000ece:	887b      	ldrh	r3, [r7, #2]
 8000ed0:	041a      	lsls	r2, r3, #16
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	619a      	str	r2, [r3, #24]
}
 8000ed6:	bf00      	nop
 8000ed8:	370c      	adds	r7, #12
 8000eda:	46bd      	mov	sp, r7
 8000edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee0:	4770      	bx	lr
	...

08000ee4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b086      	sub	sp, #24
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d101      	bne.n	8000ef6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	e267      	b.n	80013c6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	f003 0301 	and.w	r3, r3, #1
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d075      	beq.n	8000fee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8000f02:	4b88      	ldr	r3, [pc, #544]	@ (8001124 <HAL_RCC_OscConfig+0x240>)
 8000f04:	689b      	ldr	r3, [r3, #8]
 8000f06:	f003 030c 	and.w	r3, r3, #12
 8000f0a:	2b04      	cmp	r3, #4
 8000f0c:	d00c      	beq.n	8000f28 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000f0e:	4b85      	ldr	r3, [pc, #532]	@ (8001124 <HAL_RCC_OscConfig+0x240>)
 8000f10:	689b      	ldr	r3, [r3, #8]
 8000f12:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8000f16:	2b08      	cmp	r3, #8
 8000f18:	d112      	bne.n	8000f40 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000f1a:	4b82      	ldr	r3, [pc, #520]	@ (8001124 <HAL_RCC_OscConfig+0x240>)
 8000f1c:	685b      	ldr	r3, [r3, #4]
 8000f1e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000f22:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8000f26:	d10b      	bne.n	8000f40 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f28:	4b7e      	ldr	r3, [pc, #504]	@ (8001124 <HAL_RCC_OscConfig+0x240>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d05b      	beq.n	8000fec <HAL_RCC_OscConfig+0x108>
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	685b      	ldr	r3, [r3, #4]
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d157      	bne.n	8000fec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000f3c:	2301      	movs	r3, #1
 8000f3e:	e242      	b.n	80013c6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	685b      	ldr	r3, [r3, #4]
 8000f44:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000f48:	d106      	bne.n	8000f58 <HAL_RCC_OscConfig+0x74>
 8000f4a:	4b76      	ldr	r3, [pc, #472]	@ (8001124 <HAL_RCC_OscConfig+0x240>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	4a75      	ldr	r2, [pc, #468]	@ (8001124 <HAL_RCC_OscConfig+0x240>)
 8000f50:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000f54:	6013      	str	r3, [r2, #0]
 8000f56:	e01d      	b.n	8000f94 <HAL_RCC_OscConfig+0xb0>
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	685b      	ldr	r3, [r3, #4]
 8000f5c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000f60:	d10c      	bne.n	8000f7c <HAL_RCC_OscConfig+0x98>
 8000f62:	4b70      	ldr	r3, [pc, #448]	@ (8001124 <HAL_RCC_OscConfig+0x240>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	4a6f      	ldr	r2, [pc, #444]	@ (8001124 <HAL_RCC_OscConfig+0x240>)
 8000f68:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000f6c:	6013      	str	r3, [r2, #0]
 8000f6e:	4b6d      	ldr	r3, [pc, #436]	@ (8001124 <HAL_RCC_OscConfig+0x240>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	4a6c      	ldr	r2, [pc, #432]	@ (8001124 <HAL_RCC_OscConfig+0x240>)
 8000f74:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000f78:	6013      	str	r3, [r2, #0]
 8000f7a:	e00b      	b.n	8000f94 <HAL_RCC_OscConfig+0xb0>
 8000f7c:	4b69      	ldr	r3, [pc, #420]	@ (8001124 <HAL_RCC_OscConfig+0x240>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	4a68      	ldr	r2, [pc, #416]	@ (8001124 <HAL_RCC_OscConfig+0x240>)
 8000f82:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000f86:	6013      	str	r3, [r2, #0]
 8000f88:	4b66      	ldr	r3, [pc, #408]	@ (8001124 <HAL_RCC_OscConfig+0x240>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	4a65      	ldr	r2, [pc, #404]	@ (8001124 <HAL_RCC_OscConfig+0x240>)
 8000f8e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000f92:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	685b      	ldr	r3, [r3, #4]
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d013      	beq.n	8000fc4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f9c:	f7ff fcee 	bl	800097c <HAL_GetTick>
 8000fa0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fa2:	e008      	b.n	8000fb6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000fa4:	f7ff fcea 	bl	800097c <HAL_GetTick>
 8000fa8:	4602      	mov	r2, r0
 8000faa:	693b      	ldr	r3, [r7, #16]
 8000fac:	1ad3      	subs	r3, r2, r3
 8000fae:	2b64      	cmp	r3, #100	@ 0x64
 8000fb0:	d901      	bls.n	8000fb6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000fb2:	2303      	movs	r3, #3
 8000fb4:	e207      	b.n	80013c6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fb6:	4b5b      	ldr	r3, [pc, #364]	@ (8001124 <HAL_RCC_OscConfig+0x240>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d0f0      	beq.n	8000fa4 <HAL_RCC_OscConfig+0xc0>
 8000fc2:	e014      	b.n	8000fee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fc4:	f7ff fcda 	bl	800097c <HAL_GetTick>
 8000fc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fca:	e008      	b.n	8000fde <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000fcc:	f7ff fcd6 	bl	800097c <HAL_GetTick>
 8000fd0:	4602      	mov	r2, r0
 8000fd2:	693b      	ldr	r3, [r7, #16]
 8000fd4:	1ad3      	subs	r3, r2, r3
 8000fd6:	2b64      	cmp	r3, #100	@ 0x64
 8000fd8:	d901      	bls.n	8000fde <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000fda:	2303      	movs	r3, #3
 8000fdc:	e1f3      	b.n	80013c6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fde:	4b51      	ldr	r3, [pc, #324]	@ (8001124 <HAL_RCC_OscConfig+0x240>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d1f0      	bne.n	8000fcc <HAL_RCC_OscConfig+0xe8>
 8000fea:	e000      	b.n	8000fee <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	f003 0302 	and.w	r3, r3, #2
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d063      	beq.n	80010c2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8000ffa:	4b4a      	ldr	r3, [pc, #296]	@ (8001124 <HAL_RCC_OscConfig+0x240>)
 8000ffc:	689b      	ldr	r3, [r3, #8]
 8000ffe:	f003 030c 	and.w	r3, r3, #12
 8001002:	2b00      	cmp	r3, #0
 8001004:	d00b      	beq.n	800101e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001006:	4b47      	ldr	r3, [pc, #284]	@ (8001124 <HAL_RCC_OscConfig+0x240>)
 8001008:	689b      	ldr	r3, [r3, #8]
 800100a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800100e:	2b08      	cmp	r3, #8
 8001010:	d11c      	bne.n	800104c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001012:	4b44      	ldr	r3, [pc, #272]	@ (8001124 <HAL_RCC_OscConfig+0x240>)
 8001014:	685b      	ldr	r3, [r3, #4]
 8001016:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800101a:	2b00      	cmp	r3, #0
 800101c:	d116      	bne.n	800104c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800101e:	4b41      	ldr	r3, [pc, #260]	@ (8001124 <HAL_RCC_OscConfig+0x240>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	f003 0302 	and.w	r3, r3, #2
 8001026:	2b00      	cmp	r3, #0
 8001028:	d005      	beq.n	8001036 <HAL_RCC_OscConfig+0x152>
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	68db      	ldr	r3, [r3, #12]
 800102e:	2b01      	cmp	r3, #1
 8001030:	d001      	beq.n	8001036 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001032:	2301      	movs	r3, #1
 8001034:	e1c7      	b.n	80013c6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001036:	4b3b      	ldr	r3, [pc, #236]	@ (8001124 <HAL_RCC_OscConfig+0x240>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	691b      	ldr	r3, [r3, #16]
 8001042:	00db      	lsls	r3, r3, #3
 8001044:	4937      	ldr	r1, [pc, #220]	@ (8001124 <HAL_RCC_OscConfig+0x240>)
 8001046:	4313      	orrs	r3, r2
 8001048:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800104a:	e03a      	b.n	80010c2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	68db      	ldr	r3, [r3, #12]
 8001050:	2b00      	cmp	r3, #0
 8001052:	d020      	beq.n	8001096 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001054:	4b34      	ldr	r3, [pc, #208]	@ (8001128 <HAL_RCC_OscConfig+0x244>)
 8001056:	2201      	movs	r2, #1
 8001058:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800105a:	f7ff fc8f 	bl	800097c <HAL_GetTick>
 800105e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001060:	e008      	b.n	8001074 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001062:	f7ff fc8b 	bl	800097c <HAL_GetTick>
 8001066:	4602      	mov	r2, r0
 8001068:	693b      	ldr	r3, [r7, #16]
 800106a:	1ad3      	subs	r3, r2, r3
 800106c:	2b02      	cmp	r3, #2
 800106e:	d901      	bls.n	8001074 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001070:	2303      	movs	r3, #3
 8001072:	e1a8      	b.n	80013c6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001074:	4b2b      	ldr	r3, [pc, #172]	@ (8001124 <HAL_RCC_OscConfig+0x240>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	f003 0302 	and.w	r3, r3, #2
 800107c:	2b00      	cmp	r3, #0
 800107e:	d0f0      	beq.n	8001062 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001080:	4b28      	ldr	r3, [pc, #160]	@ (8001124 <HAL_RCC_OscConfig+0x240>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	691b      	ldr	r3, [r3, #16]
 800108c:	00db      	lsls	r3, r3, #3
 800108e:	4925      	ldr	r1, [pc, #148]	@ (8001124 <HAL_RCC_OscConfig+0x240>)
 8001090:	4313      	orrs	r3, r2
 8001092:	600b      	str	r3, [r1, #0]
 8001094:	e015      	b.n	80010c2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001096:	4b24      	ldr	r3, [pc, #144]	@ (8001128 <HAL_RCC_OscConfig+0x244>)
 8001098:	2200      	movs	r2, #0
 800109a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800109c:	f7ff fc6e 	bl	800097c <HAL_GetTick>
 80010a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010a2:	e008      	b.n	80010b6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80010a4:	f7ff fc6a 	bl	800097c <HAL_GetTick>
 80010a8:	4602      	mov	r2, r0
 80010aa:	693b      	ldr	r3, [r7, #16]
 80010ac:	1ad3      	subs	r3, r2, r3
 80010ae:	2b02      	cmp	r3, #2
 80010b0:	d901      	bls.n	80010b6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80010b2:	2303      	movs	r3, #3
 80010b4:	e187      	b.n	80013c6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010b6:	4b1b      	ldr	r3, [pc, #108]	@ (8001124 <HAL_RCC_OscConfig+0x240>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	f003 0302 	and.w	r3, r3, #2
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d1f0      	bne.n	80010a4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	f003 0308 	and.w	r3, r3, #8
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d036      	beq.n	800113c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	695b      	ldr	r3, [r3, #20]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d016      	beq.n	8001104 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80010d6:	4b15      	ldr	r3, [pc, #84]	@ (800112c <HAL_RCC_OscConfig+0x248>)
 80010d8:	2201      	movs	r2, #1
 80010da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80010dc:	f7ff fc4e 	bl	800097c <HAL_GetTick>
 80010e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010e2:	e008      	b.n	80010f6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80010e4:	f7ff fc4a 	bl	800097c <HAL_GetTick>
 80010e8:	4602      	mov	r2, r0
 80010ea:	693b      	ldr	r3, [r7, #16]
 80010ec:	1ad3      	subs	r3, r2, r3
 80010ee:	2b02      	cmp	r3, #2
 80010f0:	d901      	bls.n	80010f6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80010f2:	2303      	movs	r3, #3
 80010f4:	e167      	b.n	80013c6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010f6:	4b0b      	ldr	r3, [pc, #44]	@ (8001124 <HAL_RCC_OscConfig+0x240>)
 80010f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80010fa:	f003 0302 	and.w	r3, r3, #2
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d0f0      	beq.n	80010e4 <HAL_RCC_OscConfig+0x200>
 8001102:	e01b      	b.n	800113c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001104:	4b09      	ldr	r3, [pc, #36]	@ (800112c <HAL_RCC_OscConfig+0x248>)
 8001106:	2200      	movs	r2, #0
 8001108:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800110a:	f7ff fc37 	bl	800097c <HAL_GetTick>
 800110e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001110:	e00e      	b.n	8001130 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001112:	f7ff fc33 	bl	800097c <HAL_GetTick>
 8001116:	4602      	mov	r2, r0
 8001118:	693b      	ldr	r3, [r7, #16]
 800111a:	1ad3      	subs	r3, r2, r3
 800111c:	2b02      	cmp	r3, #2
 800111e:	d907      	bls.n	8001130 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001120:	2303      	movs	r3, #3
 8001122:	e150      	b.n	80013c6 <HAL_RCC_OscConfig+0x4e2>
 8001124:	40023800 	.word	0x40023800
 8001128:	42470000 	.word	0x42470000
 800112c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001130:	4b88      	ldr	r3, [pc, #544]	@ (8001354 <HAL_RCC_OscConfig+0x470>)
 8001132:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001134:	f003 0302 	and.w	r3, r3, #2
 8001138:	2b00      	cmp	r3, #0
 800113a:	d1ea      	bne.n	8001112 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	f003 0304 	and.w	r3, r3, #4
 8001144:	2b00      	cmp	r3, #0
 8001146:	f000 8097 	beq.w	8001278 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800114a:	2300      	movs	r3, #0
 800114c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800114e:	4b81      	ldr	r3, [pc, #516]	@ (8001354 <HAL_RCC_OscConfig+0x470>)
 8001150:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001152:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001156:	2b00      	cmp	r3, #0
 8001158:	d10f      	bne.n	800117a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800115a:	2300      	movs	r3, #0
 800115c:	60bb      	str	r3, [r7, #8]
 800115e:	4b7d      	ldr	r3, [pc, #500]	@ (8001354 <HAL_RCC_OscConfig+0x470>)
 8001160:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001162:	4a7c      	ldr	r2, [pc, #496]	@ (8001354 <HAL_RCC_OscConfig+0x470>)
 8001164:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001168:	6413      	str	r3, [r2, #64]	@ 0x40
 800116a:	4b7a      	ldr	r3, [pc, #488]	@ (8001354 <HAL_RCC_OscConfig+0x470>)
 800116c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800116e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001172:	60bb      	str	r3, [r7, #8]
 8001174:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001176:	2301      	movs	r3, #1
 8001178:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800117a:	4b77      	ldr	r3, [pc, #476]	@ (8001358 <HAL_RCC_OscConfig+0x474>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001182:	2b00      	cmp	r3, #0
 8001184:	d118      	bne.n	80011b8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001186:	4b74      	ldr	r3, [pc, #464]	@ (8001358 <HAL_RCC_OscConfig+0x474>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	4a73      	ldr	r2, [pc, #460]	@ (8001358 <HAL_RCC_OscConfig+0x474>)
 800118c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001190:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001192:	f7ff fbf3 	bl	800097c <HAL_GetTick>
 8001196:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001198:	e008      	b.n	80011ac <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800119a:	f7ff fbef 	bl	800097c <HAL_GetTick>
 800119e:	4602      	mov	r2, r0
 80011a0:	693b      	ldr	r3, [r7, #16]
 80011a2:	1ad3      	subs	r3, r2, r3
 80011a4:	2b02      	cmp	r3, #2
 80011a6:	d901      	bls.n	80011ac <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80011a8:	2303      	movs	r3, #3
 80011aa:	e10c      	b.n	80013c6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011ac:	4b6a      	ldr	r3, [pc, #424]	@ (8001358 <HAL_RCC_OscConfig+0x474>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d0f0      	beq.n	800119a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	689b      	ldr	r3, [r3, #8]
 80011bc:	2b01      	cmp	r3, #1
 80011be:	d106      	bne.n	80011ce <HAL_RCC_OscConfig+0x2ea>
 80011c0:	4b64      	ldr	r3, [pc, #400]	@ (8001354 <HAL_RCC_OscConfig+0x470>)
 80011c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80011c4:	4a63      	ldr	r2, [pc, #396]	@ (8001354 <HAL_RCC_OscConfig+0x470>)
 80011c6:	f043 0301 	orr.w	r3, r3, #1
 80011ca:	6713      	str	r3, [r2, #112]	@ 0x70
 80011cc:	e01c      	b.n	8001208 <HAL_RCC_OscConfig+0x324>
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	689b      	ldr	r3, [r3, #8]
 80011d2:	2b05      	cmp	r3, #5
 80011d4:	d10c      	bne.n	80011f0 <HAL_RCC_OscConfig+0x30c>
 80011d6:	4b5f      	ldr	r3, [pc, #380]	@ (8001354 <HAL_RCC_OscConfig+0x470>)
 80011d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80011da:	4a5e      	ldr	r2, [pc, #376]	@ (8001354 <HAL_RCC_OscConfig+0x470>)
 80011dc:	f043 0304 	orr.w	r3, r3, #4
 80011e0:	6713      	str	r3, [r2, #112]	@ 0x70
 80011e2:	4b5c      	ldr	r3, [pc, #368]	@ (8001354 <HAL_RCC_OscConfig+0x470>)
 80011e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80011e6:	4a5b      	ldr	r2, [pc, #364]	@ (8001354 <HAL_RCC_OscConfig+0x470>)
 80011e8:	f043 0301 	orr.w	r3, r3, #1
 80011ec:	6713      	str	r3, [r2, #112]	@ 0x70
 80011ee:	e00b      	b.n	8001208 <HAL_RCC_OscConfig+0x324>
 80011f0:	4b58      	ldr	r3, [pc, #352]	@ (8001354 <HAL_RCC_OscConfig+0x470>)
 80011f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80011f4:	4a57      	ldr	r2, [pc, #348]	@ (8001354 <HAL_RCC_OscConfig+0x470>)
 80011f6:	f023 0301 	bic.w	r3, r3, #1
 80011fa:	6713      	str	r3, [r2, #112]	@ 0x70
 80011fc:	4b55      	ldr	r3, [pc, #340]	@ (8001354 <HAL_RCC_OscConfig+0x470>)
 80011fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001200:	4a54      	ldr	r2, [pc, #336]	@ (8001354 <HAL_RCC_OscConfig+0x470>)
 8001202:	f023 0304 	bic.w	r3, r3, #4
 8001206:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	689b      	ldr	r3, [r3, #8]
 800120c:	2b00      	cmp	r3, #0
 800120e:	d015      	beq.n	800123c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001210:	f7ff fbb4 	bl	800097c <HAL_GetTick>
 8001214:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001216:	e00a      	b.n	800122e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001218:	f7ff fbb0 	bl	800097c <HAL_GetTick>
 800121c:	4602      	mov	r2, r0
 800121e:	693b      	ldr	r3, [r7, #16]
 8001220:	1ad3      	subs	r3, r2, r3
 8001222:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001226:	4293      	cmp	r3, r2
 8001228:	d901      	bls.n	800122e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800122a:	2303      	movs	r3, #3
 800122c:	e0cb      	b.n	80013c6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800122e:	4b49      	ldr	r3, [pc, #292]	@ (8001354 <HAL_RCC_OscConfig+0x470>)
 8001230:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001232:	f003 0302 	and.w	r3, r3, #2
 8001236:	2b00      	cmp	r3, #0
 8001238:	d0ee      	beq.n	8001218 <HAL_RCC_OscConfig+0x334>
 800123a:	e014      	b.n	8001266 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800123c:	f7ff fb9e 	bl	800097c <HAL_GetTick>
 8001240:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001242:	e00a      	b.n	800125a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001244:	f7ff fb9a 	bl	800097c <HAL_GetTick>
 8001248:	4602      	mov	r2, r0
 800124a:	693b      	ldr	r3, [r7, #16]
 800124c:	1ad3      	subs	r3, r2, r3
 800124e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001252:	4293      	cmp	r3, r2
 8001254:	d901      	bls.n	800125a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001256:	2303      	movs	r3, #3
 8001258:	e0b5      	b.n	80013c6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800125a:	4b3e      	ldr	r3, [pc, #248]	@ (8001354 <HAL_RCC_OscConfig+0x470>)
 800125c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800125e:	f003 0302 	and.w	r3, r3, #2
 8001262:	2b00      	cmp	r3, #0
 8001264:	d1ee      	bne.n	8001244 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001266:	7dfb      	ldrb	r3, [r7, #23]
 8001268:	2b01      	cmp	r3, #1
 800126a:	d105      	bne.n	8001278 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800126c:	4b39      	ldr	r3, [pc, #228]	@ (8001354 <HAL_RCC_OscConfig+0x470>)
 800126e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001270:	4a38      	ldr	r2, [pc, #224]	@ (8001354 <HAL_RCC_OscConfig+0x470>)
 8001272:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001276:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	699b      	ldr	r3, [r3, #24]
 800127c:	2b00      	cmp	r3, #0
 800127e:	f000 80a1 	beq.w	80013c4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001282:	4b34      	ldr	r3, [pc, #208]	@ (8001354 <HAL_RCC_OscConfig+0x470>)
 8001284:	689b      	ldr	r3, [r3, #8]
 8001286:	f003 030c 	and.w	r3, r3, #12
 800128a:	2b08      	cmp	r3, #8
 800128c:	d05c      	beq.n	8001348 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	699b      	ldr	r3, [r3, #24]
 8001292:	2b02      	cmp	r3, #2
 8001294:	d141      	bne.n	800131a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001296:	4b31      	ldr	r3, [pc, #196]	@ (800135c <HAL_RCC_OscConfig+0x478>)
 8001298:	2200      	movs	r2, #0
 800129a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800129c:	f7ff fb6e 	bl	800097c <HAL_GetTick>
 80012a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80012a2:	e008      	b.n	80012b6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012a4:	f7ff fb6a 	bl	800097c <HAL_GetTick>
 80012a8:	4602      	mov	r2, r0
 80012aa:	693b      	ldr	r3, [r7, #16]
 80012ac:	1ad3      	subs	r3, r2, r3
 80012ae:	2b02      	cmp	r3, #2
 80012b0:	d901      	bls.n	80012b6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80012b2:	2303      	movs	r3, #3
 80012b4:	e087      	b.n	80013c6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80012b6:	4b27      	ldr	r3, [pc, #156]	@ (8001354 <HAL_RCC_OscConfig+0x470>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d1f0      	bne.n	80012a4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	69da      	ldr	r2, [r3, #28]
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	6a1b      	ldr	r3, [r3, #32]
 80012ca:	431a      	orrs	r2, r3
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012d0:	019b      	lsls	r3, r3, #6
 80012d2:	431a      	orrs	r2, r3
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012d8:	085b      	lsrs	r3, r3, #1
 80012da:	3b01      	subs	r3, #1
 80012dc:	041b      	lsls	r3, r3, #16
 80012de:	431a      	orrs	r2, r3
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012e4:	061b      	lsls	r3, r3, #24
 80012e6:	491b      	ldr	r1, [pc, #108]	@ (8001354 <HAL_RCC_OscConfig+0x470>)
 80012e8:	4313      	orrs	r3, r2
 80012ea:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80012ec:	4b1b      	ldr	r3, [pc, #108]	@ (800135c <HAL_RCC_OscConfig+0x478>)
 80012ee:	2201      	movs	r2, #1
 80012f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012f2:	f7ff fb43 	bl	800097c <HAL_GetTick>
 80012f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80012f8:	e008      	b.n	800130c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012fa:	f7ff fb3f 	bl	800097c <HAL_GetTick>
 80012fe:	4602      	mov	r2, r0
 8001300:	693b      	ldr	r3, [r7, #16]
 8001302:	1ad3      	subs	r3, r2, r3
 8001304:	2b02      	cmp	r3, #2
 8001306:	d901      	bls.n	800130c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001308:	2303      	movs	r3, #3
 800130a:	e05c      	b.n	80013c6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800130c:	4b11      	ldr	r3, [pc, #68]	@ (8001354 <HAL_RCC_OscConfig+0x470>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001314:	2b00      	cmp	r3, #0
 8001316:	d0f0      	beq.n	80012fa <HAL_RCC_OscConfig+0x416>
 8001318:	e054      	b.n	80013c4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800131a:	4b10      	ldr	r3, [pc, #64]	@ (800135c <HAL_RCC_OscConfig+0x478>)
 800131c:	2200      	movs	r2, #0
 800131e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001320:	f7ff fb2c 	bl	800097c <HAL_GetTick>
 8001324:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001326:	e008      	b.n	800133a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001328:	f7ff fb28 	bl	800097c <HAL_GetTick>
 800132c:	4602      	mov	r2, r0
 800132e:	693b      	ldr	r3, [r7, #16]
 8001330:	1ad3      	subs	r3, r2, r3
 8001332:	2b02      	cmp	r3, #2
 8001334:	d901      	bls.n	800133a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001336:	2303      	movs	r3, #3
 8001338:	e045      	b.n	80013c6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800133a:	4b06      	ldr	r3, [pc, #24]	@ (8001354 <HAL_RCC_OscConfig+0x470>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001342:	2b00      	cmp	r3, #0
 8001344:	d1f0      	bne.n	8001328 <HAL_RCC_OscConfig+0x444>
 8001346:	e03d      	b.n	80013c4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	699b      	ldr	r3, [r3, #24]
 800134c:	2b01      	cmp	r3, #1
 800134e:	d107      	bne.n	8001360 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001350:	2301      	movs	r3, #1
 8001352:	e038      	b.n	80013c6 <HAL_RCC_OscConfig+0x4e2>
 8001354:	40023800 	.word	0x40023800
 8001358:	40007000 	.word	0x40007000
 800135c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001360:	4b1b      	ldr	r3, [pc, #108]	@ (80013d0 <HAL_RCC_OscConfig+0x4ec>)
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	699b      	ldr	r3, [r3, #24]
 800136a:	2b01      	cmp	r3, #1
 800136c:	d028      	beq.n	80013c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001378:	429a      	cmp	r2, r3
 800137a:	d121      	bne.n	80013c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001386:	429a      	cmp	r2, r3
 8001388:	d11a      	bne.n	80013c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800138a:	68fa      	ldr	r2, [r7, #12]
 800138c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001390:	4013      	ands	r3, r2
 8001392:	687a      	ldr	r2, [r7, #4]
 8001394:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001396:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001398:	4293      	cmp	r3, r2
 800139a:	d111      	bne.n	80013c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013a6:	085b      	lsrs	r3, r3, #1
 80013a8:	3b01      	subs	r3, #1
 80013aa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80013ac:	429a      	cmp	r2, r3
 80013ae:	d107      	bne.n	80013c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80013ba:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80013bc:	429a      	cmp	r2, r3
 80013be:	d001      	beq.n	80013c4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80013c0:	2301      	movs	r3, #1
 80013c2:	e000      	b.n	80013c6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80013c4:	2300      	movs	r3, #0
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	3718      	adds	r7, #24
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	40023800 	.word	0x40023800

080013d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b084      	sub	sp, #16
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
 80013dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d101      	bne.n	80013e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80013e4:	2301      	movs	r3, #1
 80013e6:	e0cc      	b.n	8001582 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80013e8:	4b68      	ldr	r3, [pc, #416]	@ (800158c <HAL_RCC_ClockConfig+0x1b8>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f003 0307 	and.w	r3, r3, #7
 80013f0:	683a      	ldr	r2, [r7, #0]
 80013f2:	429a      	cmp	r2, r3
 80013f4:	d90c      	bls.n	8001410 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013f6:	4b65      	ldr	r3, [pc, #404]	@ (800158c <HAL_RCC_ClockConfig+0x1b8>)
 80013f8:	683a      	ldr	r2, [r7, #0]
 80013fa:	b2d2      	uxtb	r2, r2
 80013fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80013fe:	4b63      	ldr	r3, [pc, #396]	@ (800158c <HAL_RCC_ClockConfig+0x1b8>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f003 0307 	and.w	r3, r3, #7
 8001406:	683a      	ldr	r2, [r7, #0]
 8001408:	429a      	cmp	r2, r3
 800140a:	d001      	beq.n	8001410 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800140c:	2301      	movs	r3, #1
 800140e:	e0b8      	b.n	8001582 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f003 0302 	and.w	r3, r3, #2
 8001418:	2b00      	cmp	r3, #0
 800141a:	d020      	beq.n	800145e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f003 0304 	and.w	r3, r3, #4
 8001424:	2b00      	cmp	r3, #0
 8001426:	d005      	beq.n	8001434 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001428:	4b59      	ldr	r3, [pc, #356]	@ (8001590 <HAL_RCC_ClockConfig+0x1bc>)
 800142a:	689b      	ldr	r3, [r3, #8]
 800142c:	4a58      	ldr	r2, [pc, #352]	@ (8001590 <HAL_RCC_ClockConfig+0x1bc>)
 800142e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001432:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f003 0308 	and.w	r3, r3, #8
 800143c:	2b00      	cmp	r3, #0
 800143e:	d005      	beq.n	800144c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001440:	4b53      	ldr	r3, [pc, #332]	@ (8001590 <HAL_RCC_ClockConfig+0x1bc>)
 8001442:	689b      	ldr	r3, [r3, #8]
 8001444:	4a52      	ldr	r2, [pc, #328]	@ (8001590 <HAL_RCC_ClockConfig+0x1bc>)
 8001446:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800144a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800144c:	4b50      	ldr	r3, [pc, #320]	@ (8001590 <HAL_RCC_ClockConfig+0x1bc>)
 800144e:	689b      	ldr	r3, [r3, #8]
 8001450:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	689b      	ldr	r3, [r3, #8]
 8001458:	494d      	ldr	r1, [pc, #308]	@ (8001590 <HAL_RCC_ClockConfig+0x1bc>)
 800145a:	4313      	orrs	r3, r2
 800145c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f003 0301 	and.w	r3, r3, #1
 8001466:	2b00      	cmp	r3, #0
 8001468:	d044      	beq.n	80014f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	2b01      	cmp	r3, #1
 8001470:	d107      	bne.n	8001482 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001472:	4b47      	ldr	r3, [pc, #284]	@ (8001590 <HAL_RCC_ClockConfig+0x1bc>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800147a:	2b00      	cmp	r3, #0
 800147c:	d119      	bne.n	80014b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800147e:	2301      	movs	r3, #1
 8001480:	e07f      	b.n	8001582 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	2b02      	cmp	r3, #2
 8001488:	d003      	beq.n	8001492 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800148e:	2b03      	cmp	r3, #3
 8001490:	d107      	bne.n	80014a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001492:	4b3f      	ldr	r3, [pc, #252]	@ (8001590 <HAL_RCC_ClockConfig+0x1bc>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800149a:	2b00      	cmp	r3, #0
 800149c:	d109      	bne.n	80014b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800149e:	2301      	movs	r3, #1
 80014a0:	e06f      	b.n	8001582 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014a2:	4b3b      	ldr	r3, [pc, #236]	@ (8001590 <HAL_RCC_ClockConfig+0x1bc>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f003 0302 	and.w	r3, r3, #2
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d101      	bne.n	80014b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014ae:	2301      	movs	r3, #1
 80014b0:	e067      	b.n	8001582 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80014b2:	4b37      	ldr	r3, [pc, #220]	@ (8001590 <HAL_RCC_ClockConfig+0x1bc>)
 80014b4:	689b      	ldr	r3, [r3, #8]
 80014b6:	f023 0203 	bic.w	r2, r3, #3
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	4934      	ldr	r1, [pc, #208]	@ (8001590 <HAL_RCC_ClockConfig+0x1bc>)
 80014c0:	4313      	orrs	r3, r2
 80014c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80014c4:	f7ff fa5a 	bl	800097c <HAL_GetTick>
 80014c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014ca:	e00a      	b.n	80014e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014cc:	f7ff fa56 	bl	800097c <HAL_GetTick>
 80014d0:	4602      	mov	r2, r0
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	1ad3      	subs	r3, r2, r3
 80014d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80014da:	4293      	cmp	r3, r2
 80014dc:	d901      	bls.n	80014e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80014de:	2303      	movs	r3, #3
 80014e0:	e04f      	b.n	8001582 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014e2:	4b2b      	ldr	r3, [pc, #172]	@ (8001590 <HAL_RCC_ClockConfig+0x1bc>)
 80014e4:	689b      	ldr	r3, [r3, #8]
 80014e6:	f003 020c 	and.w	r2, r3, #12
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	009b      	lsls	r3, r3, #2
 80014f0:	429a      	cmp	r2, r3
 80014f2:	d1eb      	bne.n	80014cc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80014f4:	4b25      	ldr	r3, [pc, #148]	@ (800158c <HAL_RCC_ClockConfig+0x1b8>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f003 0307 	and.w	r3, r3, #7
 80014fc:	683a      	ldr	r2, [r7, #0]
 80014fe:	429a      	cmp	r2, r3
 8001500:	d20c      	bcs.n	800151c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001502:	4b22      	ldr	r3, [pc, #136]	@ (800158c <HAL_RCC_ClockConfig+0x1b8>)
 8001504:	683a      	ldr	r2, [r7, #0]
 8001506:	b2d2      	uxtb	r2, r2
 8001508:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800150a:	4b20      	ldr	r3, [pc, #128]	@ (800158c <HAL_RCC_ClockConfig+0x1b8>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f003 0307 	and.w	r3, r3, #7
 8001512:	683a      	ldr	r2, [r7, #0]
 8001514:	429a      	cmp	r2, r3
 8001516:	d001      	beq.n	800151c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001518:	2301      	movs	r3, #1
 800151a:	e032      	b.n	8001582 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f003 0304 	and.w	r3, r3, #4
 8001524:	2b00      	cmp	r3, #0
 8001526:	d008      	beq.n	800153a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001528:	4b19      	ldr	r3, [pc, #100]	@ (8001590 <HAL_RCC_ClockConfig+0x1bc>)
 800152a:	689b      	ldr	r3, [r3, #8]
 800152c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	68db      	ldr	r3, [r3, #12]
 8001534:	4916      	ldr	r1, [pc, #88]	@ (8001590 <HAL_RCC_ClockConfig+0x1bc>)
 8001536:	4313      	orrs	r3, r2
 8001538:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f003 0308 	and.w	r3, r3, #8
 8001542:	2b00      	cmp	r3, #0
 8001544:	d009      	beq.n	800155a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001546:	4b12      	ldr	r3, [pc, #72]	@ (8001590 <HAL_RCC_ClockConfig+0x1bc>)
 8001548:	689b      	ldr	r3, [r3, #8]
 800154a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	691b      	ldr	r3, [r3, #16]
 8001552:	00db      	lsls	r3, r3, #3
 8001554:	490e      	ldr	r1, [pc, #56]	@ (8001590 <HAL_RCC_ClockConfig+0x1bc>)
 8001556:	4313      	orrs	r3, r2
 8001558:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800155a:	f000 f821 	bl	80015a0 <HAL_RCC_GetSysClockFreq>
 800155e:	4602      	mov	r2, r0
 8001560:	4b0b      	ldr	r3, [pc, #44]	@ (8001590 <HAL_RCC_ClockConfig+0x1bc>)
 8001562:	689b      	ldr	r3, [r3, #8]
 8001564:	091b      	lsrs	r3, r3, #4
 8001566:	f003 030f 	and.w	r3, r3, #15
 800156a:	490a      	ldr	r1, [pc, #40]	@ (8001594 <HAL_RCC_ClockConfig+0x1c0>)
 800156c:	5ccb      	ldrb	r3, [r1, r3]
 800156e:	fa22 f303 	lsr.w	r3, r2, r3
 8001572:	4a09      	ldr	r2, [pc, #36]	@ (8001598 <HAL_RCC_ClockConfig+0x1c4>)
 8001574:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001576:	4b09      	ldr	r3, [pc, #36]	@ (800159c <HAL_RCC_ClockConfig+0x1c8>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	4618      	mov	r0, r3
 800157c:	f7ff f9ba 	bl	80008f4 <HAL_InitTick>

  return HAL_OK;
 8001580:	2300      	movs	r3, #0
}
 8001582:	4618      	mov	r0, r3
 8001584:	3710      	adds	r7, #16
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	40023c00 	.word	0x40023c00
 8001590:	40023800 	.word	0x40023800
 8001594:	080020ac 	.word	0x080020ac
 8001598:	20000000 	.word	0x20000000
 800159c:	20000004 	.word	0x20000004

080015a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80015a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80015a4:	b094      	sub	sp, #80	@ 0x50
 80015a6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80015a8:	2300      	movs	r3, #0
 80015aa:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80015ac:	2300      	movs	r3, #0
 80015ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80015b0:	2300      	movs	r3, #0
 80015b2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80015b4:	2300      	movs	r3, #0
 80015b6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80015b8:	4b79      	ldr	r3, [pc, #484]	@ (80017a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80015ba:	689b      	ldr	r3, [r3, #8]
 80015bc:	f003 030c 	and.w	r3, r3, #12
 80015c0:	2b08      	cmp	r3, #8
 80015c2:	d00d      	beq.n	80015e0 <HAL_RCC_GetSysClockFreq+0x40>
 80015c4:	2b08      	cmp	r3, #8
 80015c6:	f200 80e1 	bhi.w	800178c <HAL_RCC_GetSysClockFreq+0x1ec>
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d002      	beq.n	80015d4 <HAL_RCC_GetSysClockFreq+0x34>
 80015ce:	2b04      	cmp	r3, #4
 80015d0:	d003      	beq.n	80015da <HAL_RCC_GetSysClockFreq+0x3a>
 80015d2:	e0db      	b.n	800178c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80015d4:	4b73      	ldr	r3, [pc, #460]	@ (80017a4 <HAL_RCC_GetSysClockFreq+0x204>)
 80015d6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80015d8:	e0db      	b.n	8001792 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80015da:	4b73      	ldr	r3, [pc, #460]	@ (80017a8 <HAL_RCC_GetSysClockFreq+0x208>)
 80015dc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80015de:	e0d8      	b.n	8001792 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80015e0:	4b6f      	ldr	r3, [pc, #444]	@ (80017a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80015e8:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80015ea:	4b6d      	ldr	r3, [pc, #436]	@ (80017a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d063      	beq.n	80016be <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80015f6:	4b6a      	ldr	r3, [pc, #424]	@ (80017a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	099b      	lsrs	r3, r3, #6
 80015fc:	2200      	movs	r2, #0
 80015fe:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001600:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001602:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001604:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001608:	633b      	str	r3, [r7, #48]	@ 0x30
 800160a:	2300      	movs	r3, #0
 800160c:	637b      	str	r3, [r7, #52]	@ 0x34
 800160e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001612:	4622      	mov	r2, r4
 8001614:	462b      	mov	r3, r5
 8001616:	f04f 0000 	mov.w	r0, #0
 800161a:	f04f 0100 	mov.w	r1, #0
 800161e:	0159      	lsls	r1, r3, #5
 8001620:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001624:	0150      	lsls	r0, r2, #5
 8001626:	4602      	mov	r2, r0
 8001628:	460b      	mov	r3, r1
 800162a:	4621      	mov	r1, r4
 800162c:	1a51      	subs	r1, r2, r1
 800162e:	6139      	str	r1, [r7, #16]
 8001630:	4629      	mov	r1, r5
 8001632:	eb63 0301 	sbc.w	r3, r3, r1
 8001636:	617b      	str	r3, [r7, #20]
 8001638:	f04f 0200 	mov.w	r2, #0
 800163c:	f04f 0300 	mov.w	r3, #0
 8001640:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001644:	4659      	mov	r1, fp
 8001646:	018b      	lsls	r3, r1, #6
 8001648:	4651      	mov	r1, sl
 800164a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800164e:	4651      	mov	r1, sl
 8001650:	018a      	lsls	r2, r1, #6
 8001652:	4651      	mov	r1, sl
 8001654:	ebb2 0801 	subs.w	r8, r2, r1
 8001658:	4659      	mov	r1, fp
 800165a:	eb63 0901 	sbc.w	r9, r3, r1
 800165e:	f04f 0200 	mov.w	r2, #0
 8001662:	f04f 0300 	mov.w	r3, #0
 8001666:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800166a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800166e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001672:	4690      	mov	r8, r2
 8001674:	4699      	mov	r9, r3
 8001676:	4623      	mov	r3, r4
 8001678:	eb18 0303 	adds.w	r3, r8, r3
 800167c:	60bb      	str	r3, [r7, #8]
 800167e:	462b      	mov	r3, r5
 8001680:	eb49 0303 	adc.w	r3, r9, r3
 8001684:	60fb      	str	r3, [r7, #12]
 8001686:	f04f 0200 	mov.w	r2, #0
 800168a:	f04f 0300 	mov.w	r3, #0
 800168e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001692:	4629      	mov	r1, r5
 8001694:	024b      	lsls	r3, r1, #9
 8001696:	4621      	mov	r1, r4
 8001698:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800169c:	4621      	mov	r1, r4
 800169e:	024a      	lsls	r2, r1, #9
 80016a0:	4610      	mov	r0, r2
 80016a2:	4619      	mov	r1, r3
 80016a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80016a6:	2200      	movs	r2, #0
 80016a8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80016aa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80016ac:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80016b0:	f7fe fd92 	bl	80001d8 <__aeabi_uldivmod>
 80016b4:	4602      	mov	r2, r0
 80016b6:	460b      	mov	r3, r1
 80016b8:	4613      	mov	r3, r2
 80016ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80016bc:	e058      	b.n	8001770 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80016be:	4b38      	ldr	r3, [pc, #224]	@ (80017a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80016c0:	685b      	ldr	r3, [r3, #4]
 80016c2:	099b      	lsrs	r3, r3, #6
 80016c4:	2200      	movs	r2, #0
 80016c6:	4618      	mov	r0, r3
 80016c8:	4611      	mov	r1, r2
 80016ca:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80016ce:	623b      	str	r3, [r7, #32]
 80016d0:	2300      	movs	r3, #0
 80016d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80016d4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80016d8:	4642      	mov	r2, r8
 80016da:	464b      	mov	r3, r9
 80016dc:	f04f 0000 	mov.w	r0, #0
 80016e0:	f04f 0100 	mov.w	r1, #0
 80016e4:	0159      	lsls	r1, r3, #5
 80016e6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80016ea:	0150      	lsls	r0, r2, #5
 80016ec:	4602      	mov	r2, r0
 80016ee:	460b      	mov	r3, r1
 80016f0:	4641      	mov	r1, r8
 80016f2:	ebb2 0a01 	subs.w	sl, r2, r1
 80016f6:	4649      	mov	r1, r9
 80016f8:	eb63 0b01 	sbc.w	fp, r3, r1
 80016fc:	f04f 0200 	mov.w	r2, #0
 8001700:	f04f 0300 	mov.w	r3, #0
 8001704:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001708:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800170c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001710:	ebb2 040a 	subs.w	r4, r2, sl
 8001714:	eb63 050b 	sbc.w	r5, r3, fp
 8001718:	f04f 0200 	mov.w	r2, #0
 800171c:	f04f 0300 	mov.w	r3, #0
 8001720:	00eb      	lsls	r3, r5, #3
 8001722:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001726:	00e2      	lsls	r2, r4, #3
 8001728:	4614      	mov	r4, r2
 800172a:	461d      	mov	r5, r3
 800172c:	4643      	mov	r3, r8
 800172e:	18e3      	adds	r3, r4, r3
 8001730:	603b      	str	r3, [r7, #0]
 8001732:	464b      	mov	r3, r9
 8001734:	eb45 0303 	adc.w	r3, r5, r3
 8001738:	607b      	str	r3, [r7, #4]
 800173a:	f04f 0200 	mov.w	r2, #0
 800173e:	f04f 0300 	mov.w	r3, #0
 8001742:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001746:	4629      	mov	r1, r5
 8001748:	028b      	lsls	r3, r1, #10
 800174a:	4621      	mov	r1, r4
 800174c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001750:	4621      	mov	r1, r4
 8001752:	028a      	lsls	r2, r1, #10
 8001754:	4610      	mov	r0, r2
 8001756:	4619      	mov	r1, r3
 8001758:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800175a:	2200      	movs	r2, #0
 800175c:	61bb      	str	r3, [r7, #24]
 800175e:	61fa      	str	r2, [r7, #28]
 8001760:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001764:	f7fe fd38 	bl	80001d8 <__aeabi_uldivmod>
 8001768:	4602      	mov	r2, r0
 800176a:	460b      	mov	r3, r1
 800176c:	4613      	mov	r3, r2
 800176e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001770:	4b0b      	ldr	r3, [pc, #44]	@ (80017a0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	0c1b      	lsrs	r3, r3, #16
 8001776:	f003 0303 	and.w	r3, r3, #3
 800177a:	3301      	adds	r3, #1
 800177c:	005b      	lsls	r3, r3, #1
 800177e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8001780:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001782:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001784:	fbb2 f3f3 	udiv	r3, r2, r3
 8001788:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800178a:	e002      	b.n	8001792 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800178c:	4b05      	ldr	r3, [pc, #20]	@ (80017a4 <HAL_RCC_GetSysClockFreq+0x204>)
 800178e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001790:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001792:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001794:	4618      	mov	r0, r3
 8001796:	3750      	adds	r7, #80	@ 0x50
 8001798:	46bd      	mov	sp, r7
 800179a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800179e:	bf00      	nop
 80017a0:	40023800 	.word	0x40023800
 80017a4:	00f42400 	.word	0x00f42400
 80017a8:	007a1200 	.word	0x007a1200

080017ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80017ac:	b480      	push	{r7}
 80017ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80017b0:	4b03      	ldr	r3, [pc, #12]	@ (80017c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80017b2:	681b      	ldr	r3, [r3, #0]
}
 80017b4:	4618      	mov	r0, r3
 80017b6:	46bd      	mov	sp, r7
 80017b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017bc:	4770      	bx	lr
 80017be:	bf00      	nop
 80017c0:	20000000 	.word	0x20000000

080017c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80017c8:	f7ff fff0 	bl	80017ac <HAL_RCC_GetHCLKFreq>
 80017cc:	4602      	mov	r2, r0
 80017ce:	4b05      	ldr	r3, [pc, #20]	@ (80017e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80017d0:	689b      	ldr	r3, [r3, #8]
 80017d2:	0a9b      	lsrs	r3, r3, #10
 80017d4:	f003 0307 	and.w	r3, r3, #7
 80017d8:	4903      	ldr	r1, [pc, #12]	@ (80017e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80017da:	5ccb      	ldrb	r3, [r1, r3]
 80017dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80017e0:	4618      	mov	r0, r3
 80017e2:	bd80      	pop	{r7, pc}
 80017e4:	40023800 	.word	0x40023800
 80017e8:	080020bc 	.word	0x080020bc

080017ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80017f0:	f7ff ffdc 	bl	80017ac <HAL_RCC_GetHCLKFreq>
 80017f4:	4602      	mov	r2, r0
 80017f6:	4b05      	ldr	r3, [pc, #20]	@ (800180c <HAL_RCC_GetPCLK2Freq+0x20>)
 80017f8:	689b      	ldr	r3, [r3, #8]
 80017fa:	0b5b      	lsrs	r3, r3, #13
 80017fc:	f003 0307 	and.w	r3, r3, #7
 8001800:	4903      	ldr	r1, [pc, #12]	@ (8001810 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001802:	5ccb      	ldrb	r3, [r1, r3]
 8001804:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001808:	4618      	mov	r0, r3
 800180a:	bd80      	pop	{r7, pc}
 800180c:	40023800 	.word	0x40023800
 8001810:	080020bc 	.word	0x080020bc

08001814 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b082      	sub	sp, #8
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	2b00      	cmp	r3, #0
 8001820:	d101      	bne.n	8001826 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001822:	2301      	movs	r3, #1
 8001824:	e042      	b.n	80018ac <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800182c:	b2db      	uxtb	r3, r3
 800182e:	2b00      	cmp	r3, #0
 8001830:	d106      	bne.n	8001840 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	2200      	movs	r2, #0
 8001836:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800183a:	6878      	ldr	r0, [r7, #4]
 800183c:	f7fe ffc6 	bl	80007cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	2224      	movs	r2, #36	@ 0x24
 8001844:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	68da      	ldr	r2, [r3, #12]
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001856:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001858:	6878      	ldr	r0, [r7, #4]
 800185a:	f000 f973 	bl	8001b44 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	691a      	ldr	r2, [r3, #16]
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800186c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	695a      	ldr	r2, [r3, #20]
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800187c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	68da      	ldr	r2, [r3, #12]
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800188c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	2200      	movs	r2, #0
 8001892:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	2220      	movs	r2, #32
 8001898:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2220      	movs	r2, #32
 80018a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2200      	movs	r2, #0
 80018a8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80018aa:	2300      	movs	r3, #0
}
 80018ac:	4618      	mov	r0, r3
 80018ae:	3708      	adds	r7, #8
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}

080018b4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b08a      	sub	sp, #40	@ 0x28
 80018b8:	af02      	add	r7, sp, #8
 80018ba:	60f8      	str	r0, [r7, #12]
 80018bc:	60b9      	str	r1, [r7, #8]
 80018be:	603b      	str	r3, [r7, #0]
 80018c0:	4613      	mov	r3, r2
 80018c2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80018c4:	2300      	movs	r3, #0
 80018c6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80018ce:	b2db      	uxtb	r3, r3
 80018d0:	2b20      	cmp	r3, #32
 80018d2:	d175      	bne.n	80019c0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80018d4:	68bb      	ldr	r3, [r7, #8]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d002      	beq.n	80018e0 <HAL_UART_Transmit+0x2c>
 80018da:	88fb      	ldrh	r3, [r7, #6]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d101      	bne.n	80018e4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80018e0:	2301      	movs	r3, #1
 80018e2:	e06e      	b.n	80019c2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	2200      	movs	r2, #0
 80018e8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	2221      	movs	r2, #33	@ 0x21
 80018ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80018f2:	f7ff f843 	bl	800097c <HAL_GetTick>
 80018f6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	88fa      	ldrh	r2, [r7, #6]
 80018fc:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	88fa      	ldrh	r2, [r7, #6]
 8001902:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	689b      	ldr	r3, [r3, #8]
 8001908:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800190c:	d108      	bne.n	8001920 <HAL_UART_Transmit+0x6c>
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	691b      	ldr	r3, [r3, #16]
 8001912:	2b00      	cmp	r3, #0
 8001914:	d104      	bne.n	8001920 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001916:	2300      	movs	r3, #0
 8001918:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800191a:	68bb      	ldr	r3, [r7, #8]
 800191c:	61bb      	str	r3, [r7, #24]
 800191e:	e003      	b.n	8001928 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001920:	68bb      	ldr	r3, [r7, #8]
 8001922:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001924:	2300      	movs	r3, #0
 8001926:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001928:	e02e      	b.n	8001988 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	9300      	str	r3, [sp, #0]
 800192e:	697b      	ldr	r3, [r7, #20]
 8001930:	2200      	movs	r2, #0
 8001932:	2180      	movs	r1, #128	@ 0x80
 8001934:	68f8      	ldr	r0, [r7, #12]
 8001936:	f000 f848 	bl	80019ca <UART_WaitOnFlagUntilTimeout>
 800193a:	4603      	mov	r3, r0
 800193c:	2b00      	cmp	r3, #0
 800193e:	d005      	beq.n	800194c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	2220      	movs	r2, #32
 8001944:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8001948:	2303      	movs	r3, #3
 800194a:	e03a      	b.n	80019c2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800194c:	69fb      	ldr	r3, [r7, #28]
 800194e:	2b00      	cmp	r3, #0
 8001950:	d10b      	bne.n	800196a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001952:	69bb      	ldr	r3, [r7, #24]
 8001954:	881b      	ldrh	r3, [r3, #0]
 8001956:	461a      	mov	r2, r3
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001960:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001962:	69bb      	ldr	r3, [r7, #24]
 8001964:	3302      	adds	r3, #2
 8001966:	61bb      	str	r3, [r7, #24]
 8001968:	e007      	b.n	800197a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800196a:	69fb      	ldr	r3, [r7, #28]
 800196c:	781a      	ldrb	r2, [r3, #0]
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001974:	69fb      	ldr	r3, [r7, #28]
 8001976:	3301      	adds	r3, #1
 8001978:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800197e:	b29b      	uxth	r3, r3
 8001980:	3b01      	subs	r3, #1
 8001982:	b29a      	uxth	r2, r3
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800198c:	b29b      	uxth	r3, r3
 800198e:	2b00      	cmp	r3, #0
 8001990:	d1cb      	bne.n	800192a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	9300      	str	r3, [sp, #0]
 8001996:	697b      	ldr	r3, [r7, #20]
 8001998:	2200      	movs	r2, #0
 800199a:	2140      	movs	r1, #64	@ 0x40
 800199c:	68f8      	ldr	r0, [r7, #12]
 800199e:	f000 f814 	bl	80019ca <UART_WaitOnFlagUntilTimeout>
 80019a2:	4603      	mov	r3, r0
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d005      	beq.n	80019b4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	2220      	movs	r2, #32
 80019ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80019b0:	2303      	movs	r3, #3
 80019b2:	e006      	b.n	80019c2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	2220      	movs	r2, #32
 80019b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80019bc:	2300      	movs	r3, #0
 80019be:	e000      	b.n	80019c2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80019c0:	2302      	movs	r3, #2
  }
}
 80019c2:	4618      	mov	r0, r3
 80019c4:	3720      	adds	r7, #32
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}

080019ca <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80019ca:	b580      	push	{r7, lr}
 80019cc:	b086      	sub	sp, #24
 80019ce:	af00      	add	r7, sp, #0
 80019d0:	60f8      	str	r0, [r7, #12]
 80019d2:	60b9      	str	r1, [r7, #8]
 80019d4:	603b      	str	r3, [r7, #0]
 80019d6:	4613      	mov	r3, r2
 80019d8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80019da:	e03b      	b.n	8001a54 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80019dc:	6a3b      	ldr	r3, [r7, #32]
 80019de:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80019e2:	d037      	beq.n	8001a54 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80019e4:	f7fe ffca 	bl	800097c <HAL_GetTick>
 80019e8:	4602      	mov	r2, r0
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	1ad3      	subs	r3, r2, r3
 80019ee:	6a3a      	ldr	r2, [r7, #32]
 80019f0:	429a      	cmp	r2, r3
 80019f2:	d302      	bcc.n	80019fa <UART_WaitOnFlagUntilTimeout+0x30>
 80019f4:	6a3b      	ldr	r3, [r7, #32]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d101      	bne.n	80019fe <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80019fa:	2303      	movs	r3, #3
 80019fc:	e03a      	b.n	8001a74 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	68db      	ldr	r3, [r3, #12]
 8001a04:	f003 0304 	and.w	r3, r3, #4
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d023      	beq.n	8001a54 <UART_WaitOnFlagUntilTimeout+0x8a>
 8001a0c:	68bb      	ldr	r3, [r7, #8]
 8001a0e:	2b80      	cmp	r3, #128	@ 0x80
 8001a10:	d020      	beq.n	8001a54 <UART_WaitOnFlagUntilTimeout+0x8a>
 8001a12:	68bb      	ldr	r3, [r7, #8]
 8001a14:	2b40      	cmp	r3, #64	@ 0x40
 8001a16:	d01d      	beq.n	8001a54 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f003 0308 	and.w	r3, r3, #8
 8001a22:	2b08      	cmp	r3, #8
 8001a24:	d116      	bne.n	8001a54 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8001a26:	2300      	movs	r3, #0
 8001a28:	617b      	str	r3, [r7, #20]
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	617b      	str	r3, [r7, #20]
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	617b      	str	r3, [r7, #20]
 8001a3a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8001a3c:	68f8      	ldr	r0, [r7, #12]
 8001a3e:	f000 f81d 	bl	8001a7c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	2208      	movs	r2, #8
 8001a46:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8001a50:	2301      	movs	r3, #1
 8001a52:	e00f      	b.n	8001a74 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	681a      	ldr	r2, [r3, #0]
 8001a5a:	68bb      	ldr	r3, [r7, #8]
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	68ba      	ldr	r2, [r7, #8]
 8001a60:	429a      	cmp	r2, r3
 8001a62:	bf0c      	ite	eq
 8001a64:	2301      	moveq	r3, #1
 8001a66:	2300      	movne	r3, #0
 8001a68:	b2db      	uxtb	r3, r3
 8001a6a:	461a      	mov	r2, r3
 8001a6c:	79fb      	ldrb	r3, [r7, #7]
 8001a6e:	429a      	cmp	r2, r3
 8001a70:	d0b4      	beq.n	80019dc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001a72:	2300      	movs	r3, #0
}
 8001a74:	4618      	mov	r0, r3
 8001a76:	3718      	adds	r7, #24
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}

08001a7c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b095      	sub	sp, #84	@ 0x54
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	330c      	adds	r3, #12
 8001a8a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001a8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a8e:	e853 3f00 	ldrex	r3, [r3]
 8001a92:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8001a94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001a96:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8001a9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	330c      	adds	r3, #12
 8001aa2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001aa4:	643a      	str	r2, [r7, #64]	@ 0x40
 8001aa6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001aa8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8001aaa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001aac:	e841 2300 	strex	r3, r2, [r1]
 8001ab0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8001ab2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d1e5      	bne.n	8001a84 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	3314      	adds	r3, #20
 8001abe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001ac0:	6a3b      	ldr	r3, [r7, #32]
 8001ac2:	e853 3f00 	ldrex	r3, [r3]
 8001ac6:	61fb      	str	r3, [r7, #28]
   return(result);
 8001ac8:	69fb      	ldr	r3, [r7, #28]
 8001aca:	f023 0301 	bic.w	r3, r3, #1
 8001ace:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	3314      	adds	r3, #20
 8001ad6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001ad8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001ada:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001adc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001ade:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001ae0:	e841 2300 	strex	r3, r2, [r1]
 8001ae4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8001ae6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d1e5      	bne.n	8001ab8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001af0:	2b01      	cmp	r3, #1
 8001af2:	d119      	bne.n	8001b28 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	330c      	adds	r3, #12
 8001afa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	e853 3f00 	ldrex	r3, [r3]
 8001b02:	60bb      	str	r3, [r7, #8]
   return(result);
 8001b04:	68bb      	ldr	r3, [r7, #8]
 8001b06:	f023 0310 	bic.w	r3, r3, #16
 8001b0a:	647b      	str	r3, [r7, #68]	@ 0x44
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	330c      	adds	r3, #12
 8001b12:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001b14:	61ba      	str	r2, [r7, #24]
 8001b16:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001b18:	6979      	ldr	r1, [r7, #20]
 8001b1a:	69ba      	ldr	r2, [r7, #24]
 8001b1c:	e841 2300 	strex	r3, r2, [r1]
 8001b20:	613b      	str	r3, [r7, #16]
   return(result);
 8001b22:	693b      	ldr	r3, [r7, #16]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d1e5      	bne.n	8001af4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2220      	movs	r2, #32
 8001b2c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2200      	movs	r2, #0
 8001b34:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8001b36:	bf00      	nop
 8001b38:	3754      	adds	r7, #84	@ 0x54
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b40:	4770      	bx	lr
	...

08001b44 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001b44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001b48:	b0c0      	sub	sp, #256	@ 0x100
 8001b4a:	af00      	add	r7, sp, #0
 8001b4c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001b50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	691b      	ldr	r3, [r3, #16]
 8001b58:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8001b5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001b60:	68d9      	ldr	r1, [r3, #12]
 8001b62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001b66:	681a      	ldr	r2, [r3, #0]
 8001b68:	ea40 0301 	orr.w	r3, r0, r1
 8001b6c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001b6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001b72:	689a      	ldr	r2, [r3, #8]
 8001b74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001b78:	691b      	ldr	r3, [r3, #16]
 8001b7a:	431a      	orrs	r2, r3
 8001b7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001b80:	695b      	ldr	r3, [r3, #20]
 8001b82:	431a      	orrs	r2, r3
 8001b84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001b88:	69db      	ldr	r3, [r3, #28]
 8001b8a:	4313      	orrs	r3, r2
 8001b8c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8001b90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	68db      	ldr	r3, [r3, #12]
 8001b98:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8001b9c:	f021 010c 	bic.w	r1, r1, #12
 8001ba0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001ba4:	681a      	ldr	r2, [r3, #0]
 8001ba6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8001baa:	430b      	orrs	r3, r1
 8001bac:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001bae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	695b      	ldr	r3, [r3, #20]
 8001bb6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8001bba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001bbe:	6999      	ldr	r1, [r3, #24]
 8001bc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001bc4:	681a      	ldr	r2, [r3, #0]
 8001bc6:	ea40 0301 	orr.w	r3, r0, r1
 8001bca:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001bcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001bd0:	681a      	ldr	r2, [r3, #0]
 8001bd2:	4b8f      	ldr	r3, [pc, #572]	@ (8001e10 <UART_SetConfig+0x2cc>)
 8001bd4:	429a      	cmp	r2, r3
 8001bd6:	d005      	beq.n	8001be4 <UART_SetConfig+0xa0>
 8001bd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001bdc:	681a      	ldr	r2, [r3, #0]
 8001bde:	4b8d      	ldr	r3, [pc, #564]	@ (8001e14 <UART_SetConfig+0x2d0>)
 8001be0:	429a      	cmp	r2, r3
 8001be2:	d104      	bne.n	8001bee <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001be4:	f7ff fe02 	bl	80017ec <HAL_RCC_GetPCLK2Freq>
 8001be8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8001bec:	e003      	b.n	8001bf6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001bee:	f7ff fde9 	bl	80017c4 <HAL_RCC_GetPCLK1Freq>
 8001bf2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001bf6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001bfa:	69db      	ldr	r3, [r3, #28]
 8001bfc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001c00:	f040 810c 	bne.w	8001e1c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001c04:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001c08:	2200      	movs	r2, #0
 8001c0a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8001c0e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8001c12:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8001c16:	4622      	mov	r2, r4
 8001c18:	462b      	mov	r3, r5
 8001c1a:	1891      	adds	r1, r2, r2
 8001c1c:	65b9      	str	r1, [r7, #88]	@ 0x58
 8001c1e:	415b      	adcs	r3, r3
 8001c20:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001c22:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001c26:	4621      	mov	r1, r4
 8001c28:	eb12 0801 	adds.w	r8, r2, r1
 8001c2c:	4629      	mov	r1, r5
 8001c2e:	eb43 0901 	adc.w	r9, r3, r1
 8001c32:	f04f 0200 	mov.w	r2, #0
 8001c36:	f04f 0300 	mov.w	r3, #0
 8001c3a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001c3e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001c42:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001c46:	4690      	mov	r8, r2
 8001c48:	4699      	mov	r9, r3
 8001c4a:	4623      	mov	r3, r4
 8001c4c:	eb18 0303 	adds.w	r3, r8, r3
 8001c50:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8001c54:	462b      	mov	r3, r5
 8001c56:	eb49 0303 	adc.w	r3, r9, r3
 8001c5a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8001c5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	2200      	movs	r2, #0
 8001c66:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8001c6a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8001c6e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8001c72:	460b      	mov	r3, r1
 8001c74:	18db      	adds	r3, r3, r3
 8001c76:	653b      	str	r3, [r7, #80]	@ 0x50
 8001c78:	4613      	mov	r3, r2
 8001c7a:	eb42 0303 	adc.w	r3, r2, r3
 8001c7e:	657b      	str	r3, [r7, #84]	@ 0x54
 8001c80:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8001c84:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8001c88:	f7fe faa6 	bl	80001d8 <__aeabi_uldivmod>
 8001c8c:	4602      	mov	r2, r0
 8001c8e:	460b      	mov	r3, r1
 8001c90:	4b61      	ldr	r3, [pc, #388]	@ (8001e18 <UART_SetConfig+0x2d4>)
 8001c92:	fba3 2302 	umull	r2, r3, r3, r2
 8001c96:	095b      	lsrs	r3, r3, #5
 8001c98:	011c      	lsls	r4, r3, #4
 8001c9a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8001ca4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8001ca8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8001cac:	4642      	mov	r2, r8
 8001cae:	464b      	mov	r3, r9
 8001cb0:	1891      	adds	r1, r2, r2
 8001cb2:	64b9      	str	r1, [r7, #72]	@ 0x48
 8001cb4:	415b      	adcs	r3, r3
 8001cb6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001cb8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001cbc:	4641      	mov	r1, r8
 8001cbe:	eb12 0a01 	adds.w	sl, r2, r1
 8001cc2:	4649      	mov	r1, r9
 8001cc4:	eb43 0b01 	adc.w	fp, r3, r1
 8001cc8:	f04f 0200 	mov.w	r2, #0
 8001ccc:	f04f 0300 	mov.w	r3, #0
 8001cd0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001cd4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001cd8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001cdc:	4692      	mov	sl, r2
 8001cde:	469b      	mov	fp, r3
 8001ce0:	4643      	mov	r3, r8
 8001ce2:	eb1a 0303 	adds.w	r3, sl, r3
 8001ce6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8001cea:	464b      	mov	r3, r9
 8001cec:	eb4b 0303 	adc.w	r3, fp, r3
 8001cf0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8001cf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8001d00:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8001d04:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8001d08:	460b      	mov	r3, r1
 8001d0a:	18db      	adds	r3, r3, r3
 8001d0c:	643b      	str	r3, [r7, #64]	@ 0x40
 8001d0e:	4613      	mov	r3, r2
 8001d10:	eb42 0303 	adc.w	r3, r2, r3
 8001d14:	647b      	str	r3, [r7, #68]	@ 0x44
 8001d16:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001d1a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8001d1e:	f7fe fa5b 	bl	80001d8 <__aeabi_uldivmod>
 8001d22:	4602      	mov	r2, r0
 8001d24:	460b      	mov	r3, r1
 8001d26:	4611      	mov	r1, r2
 8001d28:	4b3b      	ldr	r3, [pc, #236]	@ (8001e18 <UART_SetConfig+0x2d4>)
 8001d2a:	fba3 2301 	umull	r2, r3, r3, r1
 8001d2e:	095b      	lsrs	r3, r3, #5
 8001d30:	2264      	movs	r2, #100	@ 0x64
 8001d32:	fb02 f303 	mul.w	r3, r2, r3
 8001d36:	1acb      	subs	r3, r1, r3
 8001d38:	00db      	lsls	r3, r3, #3
 8001d3a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8001d3e:	4b36      	ldr	r3, [pc, #216]	@ (8001e18 <UART_SetConfig+0x2d4>)
 8001d40:	fba3 2302 	umull	r2, r3, r3, r2
 8001d44:	095b      	lsrs	r3, r3, #5
 8001d46:	005b      	lsls	r3, r3, #1
 8001d48:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8001d4c:	441c      	add	r4, r3
 8001d4e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001d52:	2200      	movs	r2, #0
 8001d54:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8001d58:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8001d5c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8001d60:	4642      	mov	r2, r8
 8001d62:	464b      	mov	r3, r9
 8001d64:	1891      	adds	r1, r2, r2
 8001d66:	63b9      	str	r1, [r7, #56]	@ 0x38
 8001d68:	415b      	adcs	r3, r3
 8001d6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001d6c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8001d70:	4641      	mov	r1, r8
 8001d72:	1851      	adds	r1, r2, r1
 8001d74:	6339      	str	r1, [r7, #48]	@ 0x30
 8001d76:	4649      	mov	r1, r9
 8001d78:	414b      	adcs	r3, r1
 8001d7a:	637b      	str	r3, [r7, #52]	@ 0x34
 8001d7c:	f04f 0200 	mov.w	r2, #0
 8001d80:	f04f 0300 	mov.w	r3, #0
 8001d84:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8001d88:	4659      	mov	r1, fp
 8001d8a:	00cb      	lsls	r3, r1, #3
 8001d8c:	4651      	mov	r1, sl
 8001d8e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001d92:	4651      	mov	r1, sl
 8001d94:	00ca      	lsls	r2, r1, #3
 8001d96:	4610      	mov	r0, r2
 8001d98:	4619      	mov	r1, r3
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	4642      	mov	r2, r8
 8001d9e:	189b      	adds	r3, r3, r2
 8001da0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8001da4:	464b      	mov	r3, r9
 8001da6:	460a      	mov	r2, r1
 8001da8:	eb42 0303 	adc.w	r3, r2, r3
 8001dac:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001db0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	2200      	movs	r2, #0
 8001db8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8001dbc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8001dc0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8001dc4:	460b      	mov	r3, r1
 8001dc6:	18db      	adds	r3, r3, r3
 8001dc8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001dca:	4613      	mov	r3, r2
 8001dcc:	eb42 0303 	adc.w	r3, r2, r3
 8001dd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001dd2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001dd6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8001dda:	f7fe f9fd 	bl	80001d8 <__aeabi_uldivmod>
 8001dde:	4602      	mov	r2, r0
 8001de0:	460b      	mov	r3, r1
 8001de2:	4b0d      	ldr	r3, [pc, #52]	@ (8001e18 <UART_SetConfig+0x2d4>)
 8001de4:	fba3 1302 	umull	r1, r3, r3, r2
 8001de8:	095b      	lsrs	r3, r3, #5
 8001dea:	2164      	movs	r1, #100	@ 0x64
 8001dec:	fb01 f303 	mul.w	r3, r1, r3
 8001df0:	1ad3      	subs	r3, r2, r3
 8001df2:	00db      	lsls	r3, r3, #3
 8001df4:	3332      	adds	r3, #50	@ 0x32
 8001df6:	4a08      	ldr	r2, [pc, #32]	@ (8001e18 <UART_SetConfig+0x2d4>)
 8001df8:	fba2 2303 	umull	r2, r3, r2, r3
 8001dfc:	095b      	lsrs	r3, r3, #5
 8001dfe:	f003 0207 	and.w	r2, r3, #7
 8001e02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4422      	add	r2, r4
 8001e0a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8001e0c:	e106      	b.n	800201c <UART_SetConfig+0x4d8>
 8001e0e:	bf00      	nop
 8001e10:	40011000 	.word	0x40011000
 8001e14:	40011400 	.word	0x40011400
 8001e18:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001e1c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001e20:	2200      	movs	r2, #0
 8001e22:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8001e26:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8001e2a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8001e2e:	4642      	mov	r2, r8
 8001e30:	464b      	mov	r3, r9
 8001e32:	1891      	adds	r1, r2, r2
 8001e34:	6239      	str	r1, [r7, #32]
 8001e36:	415b      	adcs	r3, r3
 8001e38:	627b      	str	r3, [r7, #36]	@ 0x24
 8001e3a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001e3e:	4641      	mov	r1, r8
 8001e40:	1854      	adds	r4, r2, r1
 8001e42:	4649      	mov	r1, r9
 8001e44:	eb43 0501 	adc.w	r5, r3, r1
 8001e48:	f04f 0200 	mov.w	r2, #0
 8001e4c:	f04f 0300 	mov.w	r3, #0
 8001e50:	00eb      	lsls	r3, r5, #3
 8001e52:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001e56:	00e2      	lsls	r2, r4, #3
 8001e58:	4614      	mov	r4, r2
 8001e5a:	461d      	mov	r5, r3
 8001e5c:	4643      	mov	r3, r8
 8001e5e:	18e3      	adds	r3, r4, r3
 8001e60:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001e64:	464b      	mov	r3, r9
 8001e66:	eb45 0303 	adc.w	r3, r5, r3
 8001e6a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8001e6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	2200      	movs	r2, #0
 8001e76:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001e7a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8001e7e:	f04f 0200 	mov.w	r2, #0
 8001e82:	f04f 0300 	mov.w	r3, #0
 8001e86:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8001e8a:	4629      	mov	r1, r5
 8001e8c:	008b      	lsls	r3, r1, #2
 8001e8e:	4621      	mov	r1, r4
 8001e90:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001e94:	4621      	mov	r1, r4
 8001e96:	008a      	lsls	r2, r1, #2
 8001e98:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8001e9c:	f7fe f99c 	bl	80001d8 <__aeabi_uldivmod>
 8001ea0:	4602      	mov	r2, r0
 8001ea2:	460b      	mov	r3, r1
 8001ea4:	4b60      	ldr	r3, [pc, #384]	@ (8002028 <UART_SetConfig+0x4e4>)
 8001ea6:	fba3 2302 	umull	r2, r3, r3, r2
 8001eaa:	095b      	lsrs	r3, r3, #5
 8001eac:	011c      	lsls	r4, r3, #4
 8001eae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001eb8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8001ebc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8001ec0:	4642      	mov	r2, r8
 8001ec2:	464b      	mov	r3, r9
 8001ec4:	1891      	adds	r1, r2, r2
 8001ec6:	61b9      	str	r1, [r7, #24]
 8001ec8:	415b      	adcs	r3, r3
 8001eca:	61fb      	str	r3, [r7, #28]
 8001ecc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001ed0:	4641      	mov	r1, r8
 8001ed2:	1851      	adds	r1, r2, r1
 8001ed4:	6139      	str	r1, [r7, #16]
 8001ed6:	4649      	mov	r1, r9
 8001ed8:	414b      	adcs	r3, r1
 8001eda:	617b      	str	r3, [r7, #20]
 8001edc:	f04f 0200 	mov.w	r2, #0
 8001ee0:	f04f 0300 	mov.w	r3, #0
 8001ee4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001ee8:	4659      	mov	r1, fp
 8001eea:	00cb      	lsls	r3, r1, #3
 8001eec:	4651      	mov	r1, sl
 8001eee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001ef2:	4651      	mov	r1, sl
 8001ef4:	00ca      	lsls	r2, r1, #3
 8001ef6:	4610      	mov	r0, r2
 8001ef8:	4619      	mov	r1, r3
 8001efa:	4603      	mov	r3, r0
 8001efc:	4642      	mov	r2, r8
 8001efe:	189b      	adds	r3, r3, r2
 8001f00:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001f04:	464b      	mov	r3, r9
 8001f06:	460a      	mov	r2, r1
 8001f08:	eb42 0303 	adc.w	r3, r2, r3
 8001f0c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8001f10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	2200      	movs	r2, #0
 8001f18:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001f1a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8001f1c:	f04f 0200 	mov.w	r2, #0
 8001f20:	f04f 0300 	mov.w	r3, #0
 8001f24:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8001f28:	4649      	mov	r1, r9
 8001f2a:	008b      	lsls	r3, r1, #2
 8001f2c:	4641      	mov	r1, r8
 8001f2e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001f32:	4641      	mov	r1, r8
 8001f34:	008a      	lsls	r2, r1, #2
 8001f36:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8001f3a:	f7fe f94d 	bl	80001d8 <__aeabi_uldivmod>
 8001f3e:	4602      	mov	r2, r0
 8001f40:	460b      	mov	r3, r1
 8001f42:	4611      	mov	r1, r2
 8001f44:	4b38      	ldr	r3, [pc, #224]	@ (8002028 <UART_SetConfig+0x4e4>)
 8001f46:	fba3 2301 	umull	r2, r3, r3, r1
 8001f4a:	095b      	lsrs	r3, r3, #5
 8001f4c:	2264      	movs	r2, #100	@ 0x64
 8001f4e:	fb02 f303 	mul.w	r3, r2, r3
 8001f52:	1acb      	subs	r3, r1, r3
 8001f54:	011b      	lsls	r3, r3, #4
 8001f56:	3332      	adds	r3, #50	@ 0x32
 8001f58:	4a33      	ldr	r2, [pc, #204]	@ (8002028 <UART_SetConfig+0x4e4>)
 8001f5a:	fba2 2303 	umull	r2, r3, r2, r3
 8001f5e:	095b      	lsrs	r3, r3, #5
 8001f60:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001f64:	441c      	add	r4, r3
 8001f66:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	673b      	str	r3, [r7, #112]	@ 0x70
 8001f6e:	677a      	str	r2, [r7, #116]	@ 0x74
 8001f70:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8001f74:	4642      	mov	r2, r8
 8001f76:	464b      	mov	r3, r9
 8001f78:	1891      	adds	r1, r2, r2
 8001f7a:	60b9      	str	r1, [r7, #8]
 8001f7c:	415b      	adcs	r3, r3
 8001f7e:	60fb      	str	r3, [r7, #12]
 8001f80:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001f84:	4641      	mov	r1, r8
 8001f86:	1851      	adds	r1, r2, r1
 8001f88:	6039      	str	r1, [r7, #0]
 8001f8a:	4649      	mov	r1, r9
 8001f8c:	414b      	adcs	r3, r1
 8001f8e:	607b      	str	r3, [r7, #4]
 8001f90:	f04f 0200 	mov.w	r2, #0
 8001f94:	f04f 0300 	mov.w	r3, #0
 8001f98:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8001f9c:	4659      	mov	r1, fp
 8001f9e:	00cb      	lsls	r3, r1, #3
 8001fa0:	4651      	mov	r1, sl
 8001fa2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001fa6:	4651      	mov	r1, sl
 8001fa8:	00ca      	lsls	r2, r1, #3
 8001faa:	4610      	mov	r0, r2
 8001fac:	4619      	mov	r1, r3
 8001fae:	4603      	mov	r3, r0
 8001fb0:	4642      	mov	r2, r8
 8001fb2:	189b      	adds	r3, r3, r2
 8001fb4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001fb6:	464b      	mov	r3, r9
 8001fb8:	460a      	mov	r2, r1
 8001fba:	eb42 0303 	adc.w	r3, r2, r3
 8001fbe:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8001fc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	663b      	str	r3, [r7, #96]	@ 0x60
 8001fca:	667a      	str	r2, [r7, #100]	@ 0x64
 8001fcc:	f04f 0200 	mov.w	r2, #0
 8001fd0:	f04f 0300 	mov.w	r3, #0
 8001fd4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8001fd8:	4649      	mov	r1, r9
 8001fda:	008b      	lsls	r3, r1, #2
 8001fdc:	4641      	mov	r1, r8
 8001fde:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001fe2:	4641      	mov	r1, r8
 8001fe4:	008a      	lsls	r2, r1, #2
 8001fe6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8001fea:	f7fe f8f5 	bl	80001d8 <__aeabi_uldivmod>
 8001fee:	4602      	mov	r2, r0
 8001ff0:	460b      	mov	r3, r1
 8001ff2:	4b0d      	ldr	r3, [pc, #52]	@ (8002028 <UART_SetConfig+0x4e4>)
 8001ff4:	fba3 1302 	umull	r1, r3, r3, r2
 8001ff8:	095b      	lsrs	r3, r3, #5
 8001ffa:	2164      	movs	r1, #100	@ 0x64
 8001ffc:	fb01 f303 	mul.w	r3, r1, r3
 8002000:	1ad3      	subs	r3, r2, r3
 8002002:	011b      	lsls	r3, r3, #4
 8002004:	3332      	adds	r3, #50	@ 0x32
 8002006:	4a08      	ldr	r2, [pc, #32]	@ (8002028 <UART_SetConfig+0x4e4>)
 8002008:	fba2 2303 	umull	r2, r3, r2, r3
 800200c:	095b      	lsrs	r3, r3, #5
 800200e:	f003 020f 	and.w	r2, r3, #15
 8002012:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4422      	add	r2, r4
 800201a:	609a      	str	r2, [r3, #8]
}
 800201c:	bf00      	nop
 800201e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002022:	46bd      	mov	sp, r7
 8002024:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002028:	51eb851f 	.word	0x51eb851f

0800202c <memset>:
 800202c:	4402      	add	r2, r0
 800202e:	4603      	mov	r3, r0
 8002030:	4293      	cmp	r3, r2
 8002032:	d100      	bne.n	8002036 <memset+0xa>
 8002034:	4770      	bx	lr
 8002036:	f803 1b01 	strb.w	r1, [r3], #1
 800203a:	e7f9      	b.n	8002030 <memset+0x4>

0800203c <__libc_init_array>:
 800203c:	b570      	push	{r4, r5, r6, lr}
 800203e:	4d0d      	ldr	r5, [pc, #52]	@ (8002074 <__libc_init_array+0x38>)
 8002040:	4c0d      	ldr	r4, [pc, #52]	@ (8002078 <__libc_init_array+0x3c>)
 8002042:	1b64      	subs	r4, r4, r5
 8002044:	10a4      	asrs	r4, r4, #2
 8002046:	2600      	movs	r6, #0
 8002048:	42a6      	cmp	r6, r4
 800204a:	d109      	bne.n	8002060 <__libc_init_array+0x24>
 800204c:	4d0b      	ldr	r5, [pc, #44]	@ (800207c <__libc_init_array+0x40>)
 800204e:	4c0c      	ldr	r4, [pc, #48]	@ (8002080 <__libc_init_array+0x44>)
 8002050:	f000 f818 	bl	8002084 <_init>
 8002054:	1b64      	subs	r4, r4, r5
 8002056:	10a4      	asrs	r4, r4, #2
 8002058:	2600      	movs	r6, #0
 800205a:	42a6      	cmp	r6, r4
 800205c:	d105      	bne.n	800206a <__libc_init_array+0x2e>
 800205e:	bd70      	pop	{r4, r5, r6, pc}
 8002060:	f855 3b04 	ldr.w	r3, [r5], #4
 8002064:	4798      	blx	r3
 8002066:	3601      	adds	r6, #1
 8002068:	e7ee      	b.n	8002048 <__libc_init_array+0xc>
 800206a:	f855 3b04 	ldr.w	r3, [r5], #4
 800206e:	4798      	blx	r3
 8002070:	3601      	adds	r6, #1
 8002072:	e7f2      	b.n	800205a <__libc_init_array+0x1e>
 8002074:	080020cc 	.word	0x080020cc
 8002078:	080020cc 	.word	0x080020cc
 800207c:	080020cc 	.word	0x080020cc
 8002080:	080020d0 	.word	0x080020d0

08002084 <_init>:
 8002084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002086:	bf00      	nop
 8002088:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800208a:	bc08      	pop	{r3}
 800208c:	469e      	mov	lr, r3
 800208e:	4770      	bx	lr

08002090 <_fini>:
 8002090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002092:	bf00      	nop
 8002094:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002096:	bc08      	pop	{r3}
 8002098:	469e      	mov	lr, r3
 800209a:	4770      	bx	lr
