
01_LED_REG_EMPTY.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000001ec  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000384  0800038c  0000138c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000384  08000384  0000138c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08000384  08000384  0000138c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08000384  0800038c  0000138c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000384  08000384  00001384  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000388  08000388  00001388  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  0000138c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  0800038c  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  0800038c  0000201c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000138c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000102  00000000  00000000  000013bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000000b4  00000000  00000000  000014be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000050  00000000  00000000  00001578  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000033  00000000  00000000  000015c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00001036  00000000  00000000  000015fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000478  00000000  00000000  00002631  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00004020  00000000  00000000  00002aa9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00006ac9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000007c  00000000  00000000  00006b0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  00006b88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000000 	.word	0x20000000
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800036c 	.word	0x0800036c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000004 	.word	0x20000004
 80001d4:	0800036c 	.word	0x0800036c

080001d8 <SystemClock_Config>:
#define GPIOA_MODER (*(volatile uint32_t *)(GPIOA_BASE + 0x00))
#define GPIOA_ODR   (*(volatile uint32_t *)(GPIOA_BASE + 0x14))
#define RCC_AHB1ENR (*(volatile uint32_t *)(RCC_BASE + 0x30))  // RCC AHB1 Enable 레지스터 추가 정의

void SystemClock_Config(void)
{
 80001d8:	b480      	push	{r7}
 80001da:	af00      	add	r7, sp, #0
    /* 1. HSE 활성화 */
    RCC_CR |= RCC_CR_HSEON;                    // HSE ON
 80001dc:	4b22      	ldr	r3, [pc, #136]	@ (8000268 <SystemClock_Config+0x90>)
 80001de:	681b      	ldr	r3, [r3, #0]
 80001e0:	4a21      	ldr	r2, [pc, #132]	@ (8000268 <SystemClock_Config+0x90>)
 80001e2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80001e6:	6013      	str	r3, [r2, #0]
    while (!(RCC_CR & RCC_CR_HSERDY));         // HSE Ready 플래그 대기
 80001e8:	bf00      	nop
 80001ea:	4b1f      	ldr	r3, [pc, #124]	@ (8000268 <SystemClock_Config+0x90>)
 80001ec:	681b      	ldr	r3, [r3, #0]
 80001ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80001f2:	2b00      	cmp	r3, #0
 80001f4:	d0f9      	beq.n	80001ea <SystemClock_Config+0x12>

    /* 2. PLL 설정: PLLM, PLLN, PLLP 값 설정 */
    // HSE = 8MHz, 목표 SYSCLK = 100MHz
    RCC_PLLCFGR = (4 << RCC_PLLCFGR_PLLM_Pos) |    // PLLM = 4
 80001f6:	4b1d      	ldr	r3, [pc, #116]	@ (800026c <SystemClock_Config+0x94>)
 80001f8:	4a1d      	ldr	r2, [pc, #116]	@ (8000270 <SystemClock_Config+0x98>)
 80001fa:	601a      	str	r2, [r3, #0]
                  (200 << RCC_PLLCFGR_PLLN_Pos)|    // PLLN = 200
                  (0x1 << RCC_PLLCFGR_PLLP_Pos)|    // PLLP = 4 (10: ÷4)
                  (1 << RCC_PLLCFGR_PLLSRC_Pos);    // PLL 소스 = HSE

    /* 3. PLL 활성화 */
    RCC_CR |= RCC_CR_PLLON;                    // PLL ON
 80001fc:	4b1a      	ldr	r3, [pc, #104]	@ (8000268 <SystemClock_Config+0x90>)
 80001fe:	681b      	ldr	r3, [r3, #0]
 8000200:	4a19      	ldr	r2, [pc, #100]	@ (8000268 <SystemClock_Config+0x90>)
 8000202:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000206:	6013      	str	r3, [r2, #0]
    while (!(RCC_CR & RCC_CR_PLLRDY));         // PLL Ready 플래그 대기
 8000208:	bf00      	nop
 800020a:	4b17      	ldr	r3, [pc, #92]	@ (8000268 <SystemClock_Config+0x90>)
 800020c:	681b      	ldr	r3, [r3, #0]
 800020e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000212:	2b00      	cmp	r3, #0
 8000214:	d0f9      	beq.n	800020a <SystemClock_Config+0x32>

    /* 4. AHB, APB1, APB2 분주기 설정 */
    RCC_CFGR |= (0 << RCC_CFGR_HPRE_Pos);     // AHB Prescaler = 1 (SYSCLK 그대로)
 8000216:	4b17      	ldr	r3, [pc, #92]	@ (8000274 <SystemClock_Config+0x9c>)
 8000218:	4a16      	ldr	r2, [pc, #88]	@ (8000274 <SystemClock_Config+0x9c>)
 800021a:	681b      	ldr	r3, [r3, #0]
 800021c:	6013      	str	r3, [r2, #0]
    RCC_CFGR |= (5 << RCC_CFGR_PPRE1_Pos);    // APB1 Prescaler = 4 (25MHz 최대)
 800021e:	4b15      	ldr	r3, [pc, #84]	@ (8000274 <SystemClock_Config+0x9c>)
 8000220:	681b      	ldr	r3, [r3, #0]
 8000222:	4a14      	ldr	r2, [pc, #80]	@ (8000274 <SystemClock_Config+0x9c>)
 8000224:	f443 53a0 	orr.w	r3, r3, #5120	@ 0x1400
 8000228:	6013      	str	r3, [r2, #0]
    RCC_CFGR |= (4 << RCC_CFGR_PPRE2_Pos);    // APB2 Prescaler = 2 (50MHz 최대)
 800022a:	4b12      	ldr	r3, [pc, #72]	@ (8000274 <SystemClock_Config+0x9c>)
 800022c:	681b      	ldr	r3, [r3, #0]
 800022e:	4a11      	ldr	r2, [pc, #68]	@ (8000274 <SystemClock_Config+0x9c>)
 8000230:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000234:	6013      	str	r3, [r2, #0]

    /* 5. 플래시 메모리 설정 (Latency 조정) */
    FLASH_ACR |= FLASH_ACR_LATENCY_3WS;        // 3 Wait State (100MHz 동작 시 필요)
 8000236:	4b10      	ldr	r3, [pc, #64]	@ (8000278 <SystemClock_Config+0xa0>)
 8000238:	681b      	ldr	r3, [r3, #0]
 800023a:	4a0f      	ldr	r2, [pc, #60]	@ (8000278 <SystemClock_Config+0xa0>)
 800023c:	f043 0303 	orr.w	r3, r3, #3
 8000240:	6013      	str	r3, [r2, #0]

    /* 6. 시스템 클럭 소스로 PLL 선택 */
    RCC_CFGR |= RCC_CFGR_SW_PLL;              // SW[1:0] = 10 (PLL 선택)
 8000242:	4b0c      	ldr	r3, [pc, #48]	@ (8000274 <SystemClock_Config+0x9c>)
 8000244:	681b      	ldr	r3, [r3, #0]
 8000246:	4a0b      	ldr	r2, [pc, #44]	@ (8000274 <SystemClock_Config+0x9c>)
 8000248:	f043 0302 	orr.w	r3, r3, #2
 800024c:	6013      	str	r3, [r2, #0]
    while ((RCC_CFGR & RCC_CFGR_SW_PLL) != RCC_CFGR_SW_PLL); // SWS 확인
 800024e:	bf00      	nop
 8000250:	4b08      	ldr	r3, [pc, #32]	@ (8000274 <SystemClock_Config+0x9c>)
 8000252:	681b      	ldr	r3, [r3, #0]
 8000254:	f003 0302 	and.w	r3, r3, #2
 8000258:	2b02      	cmp	r3, #2
 800025a:	d1f9      	bne.n	8000250 <SystemClock_Config+0x78>
}
 800025c:	bf00      	nop
 800025e:	bf00      	nop
 8000260:	46bd      	mov	sp, r7
 8000262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000266:	4770      	bx	lr
 8000268:	40023800 	.word	0x40023800
 800026c:	40023804 	.word	0x40023804
 8000270:	00413204 	.word	0x00413204
 8000274:	40023808 	.word	0x40023808
 8000278:	40023c00 	.word	0x40023c00

0800027c <main>:



int main()
{
 800027c:	b580      	push	{r7, lr}
 800027e:	b082      	sub	sp, #8
 8000280:	af00      	add	r7, sp, #0
    SystemClock_Config();  // 시스템 클럭 설정
 8000282:	f7ff ffa9 	bl	80001d8 <SystemClock_Config>

    /* GPIO 설정 테스트용 */
    RCC_AHB1ENR |= RCC_AHB1ENR_GPIOAEN;  // GPIOA 클럭 활성화
 8000286:	4b0e      	ldr	r3, [pc, #56]	@ (80002c0 <main+0x44>)
 8000288:	681b      	ldr	r3, [r3, #0]
 800028a:	4a0d      	ldr	r2, [pc, #52]	@ (80002c0 <main+0x44>)
 800028c:	f043 0301 	orr.w	r3, r3, #1
 8000290:	6013      	str	r3, [r2, #0]
    GPIOA_MODER |= GPIOA_MODER_MODER5;   // PA5를 출력 모드로 설정
 8000292:	4b0c      	ldr	r3, [pc, #48]	@ (80002c4 <main+0x48>)
 8000294:	681b      	ldr	r3, [r3, #0]
 8000296:	4a0b      	ldr	r2, [pc, #44]	@ (80002c4 <main+0x48>)
 8000298:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800029c:	6013      	str	r3, [r2, #0]

    while (1) {
        GPIOA_ODR ^= GPIOA_ODR_ODR5;           // PA5 토글 (LED Blink)
 800029e:	4b0a      	ldr	r3, [pc, #40]	@ (80002c8 <main+0x4c>)
 80002a0:	681b      	ldr	r3, [r3, #0]
 80002a2:	4a09      	ldr	r2, [pc, #36]	@ (80002c8 <main+0x4c>)
 80002a4:	f083 0320 	eor.w	r3, r3, #32
 80002a8:	6013      	str	r3, [r2, #0]
        for (volatile int i = 0; i < 10000000; i++);  // 딜레이
 80002aa:	2300      	movs	r3, #0
 80002ac:	607b      	str	r3, [r7, #4]
 80002ae:	e002      	b.n	80002b6 <main+0x3a>
 80002b0:	687b      	ldr	r3, [r7, #4]
 80002b2:	3301      	adds	r3, #1
 80002b4:	607b      	str	r3, [r7, #4]
 80002b6:	687b      	ldr	r3, [r7, #4]
 80002b8:	4a04      	ldr	r2, [pc, #16]	@ (80002cc <main+0x50>)
 80002ba:	4293      	cmp	r3, r2
 80002bc:	dbf8      	blt.n	80002b0 <main+0x34>
        GPIOA_ODR ^= GPIOA_ODR_ODR5;           // PA5 토글 (LED Blink)
 80002be:	e7ee      	b.n	800029e <main+0x22>
 80002c0:	40023830 	.word	0x40023830
 80002c4:	40020000 	.word	0x40020000
 80002c8:	40020014 	.word	0x40020014
 80002cc:	00989680 	.word	0x00989680

080002d0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002d0:	480d      	ldr	r0, [pc, #52]	@ (8000308 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002d2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80002d4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002d8:	480c      	ldr	r0, [pc, #48]	@ (800030c <LoopForever+0x6>)
  ldr r1, =_edata
 80002da:	490d      	ldr	r1, [pc, #52]	@ (8000310 <LoopForever+0xa>)
  ldr r2, =_sidata
 80002dc:	4a0d      	ldr	r2, [pc, #52]	@ (8000314 <LoopForever+0xe>)
  movs r3, #0
 80002de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002e0:	e002      	b.n	80002e8 <LoopCopyDataInit>

080002e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002e6:	3304      	adds	r3, #4

080002e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002ec:	d3f9      	bcc.n	80002e2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002ee:	4a0a      	ldr	r2, [pc, #40]	@ (8000318 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002f0:	4c0a      	ldr	r4, [pc, #40]	@ (800031c <LoopForever+0x16>)
  movs r3, #0
 80002f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002f4:	e001      	b.n	80002fa <LoopFillZerobss>

080002f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002f8:	3204      	adds	r2, #4

080002fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002fc:	d3fb      	bcc.n	80002f6 <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 80002fe:	f000 f811 	bl	8000324 <__libc_init_array>
/* Call the application's entry point.*/

  bl main
 8000302:	f7ff ffbb 	bl	800027c <main>

08000306 <LoopForever>:

LoopForever:
  b LoopForever
 8000306:	e7fe      	b.n	8000306 <LoopForever>
  ldr   r0, =_estack
 8000308:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800030c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000310:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000314:	0800038c 	.word	0x0800038c
  ldr r2, =_sbss
 8000318:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800031c:	2000001c 	.word	0x2000001c

08000320 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000320:	e7fe      	b.n	8000320 <ADC_IRQHandler>
	...

08000324 <__libc_init_array>:
 8000324:	b570      	push	{r4, r5, r6, lr}
 8000326:	4d0d      	ldr	r5, [pc, #52]	@ (800035c <__libc_init_array+0x38>)
 8000328:	4c0d      	ldr	r4, [pc, #52]	@ (8000360 <__libc_init_array+0x3c>)
 800032a:	1b64      	subs	r4, r4, r5
 800032c:	10a4      	asrs	r4, r4, #2
 800032e:	2600      	movs	r6, #0
 8000330:	42a6      	cmp	r6, r4
 8000332:	d109      	bne.n	8000348 <__libc_init_array+0x24>
 8000334:	4d0b      	ldr	r5, [pc, #44]	@ (8000364 <__libc_init_array+0x40>)
 8000336:	4c0c      	ldr	r4, [pc, #48]	@ (8000368 <__libc_init_array+0x44>)
 8000338:	f000 f818 	bl	800036c <_init>
 800033c:	1b64      	subs	r4, r4, r5
 800033e:	10a4      	asrs	r4, r4, #2
 8000340:	2600      	movs	r6, #0
 8000342:	42a6      	cmp	r6, r4
 8000344:	d105      	bne.n	8000352 <__libc_init_array+0x2e>
 8000346:	bd70      	pop	{r4, r5, r6, pc}
 8000348:	f855 3b04 	ldr.w	r3, [r5], #4
 800034c:	4798      	blx	r3
 800034e:	3601      	adds	r6, #1
 8000350:	e7ee      	b.n	8000330 <__libc_init_array+0xc>
 8000352:	f855 3b04 	ldr.w	r3, [r5], #4
 8000356:	4798      	blx	r3
 8000358:	3601      	adds	r6, #1
 800035a:	e7f2      	b.n	8000342 <__libc_init_array+0x1e>
 800035c:	08000384 	.word	0x08000384
 8000360:	08000384 	.word	0x08000384
 8000364:	08000384 	.word	0x08000384
 8000368:	08000388 	.word	0x08000388

0800036c <_init>:
 800036c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800036e:	bf00      	nop
 8000370:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000372:	bc08      	pop	{r3}
 8000374:	469e      	mov	lr, r3
 8000376:	4770      	bx	lr

08000378 <_fini>:
 8000378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800037a:	bf00      	nop
 800037c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800037e:	bc08      	pop	{r3}
 8000380:	469e      	mov	lr, r3
 8000382:	4770      	bx	lr
